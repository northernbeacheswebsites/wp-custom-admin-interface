jQuery(document).ready(function ($) {
    
    
    //instantiates codemirror
    var cssCode = CodeMirror.fromTextArea(document.getElementById("wp_custom_admin_interface_custom_css_code"), {
        lineNumbers: true,
        mode: "css",
        theme: "blackboard",    
        matchBrackets: true,
        autoCloseTags: true,
        autoCloseBrackets: true
    });
    
    var cssCode = CodeMirror.fromTextArea(document.getElementById("wp_custom_admin_interface_custom_login_css_code"), {
        lineNumbers: true,
        mode: "css",
        theme: "blackboard",
        matchBrackets: true,
        autoCloseTags: true,
        autoCloseBrackets: true    
    });
    
    
    var javascriptCode = CodeMirror.fromTextArea(document.getElementById("wp_custom_admin_interface_custom_javascript_code"), {
        lineNumbers: true,
        mode: "javascript",
        theme: "blackboard",    
        matchBrackets: true,
        autoCloseTags: true,
        autoCloseBrackets: true    
    });
    
    var phpCode = CodeMirror.fromTextArea(document.getElementById("wp_custom_admin_interface_custom_php_code"), {
        lineNumbers: true,
        mode: 'application/x-httpd-php',
        theme: "blackboard",
        matchBrackets: true,
        autoCloseTags: true,
        autoCloseBrackets: true
    });
    
    
    
    //make help area content into an accordion
    $("#accordion").accordion({
        collapsible: true,
        autoHeight: false,
        heightStyle: "content",
        speed: "fast"
    });
    
    
    //make tabs tabs
    $("#tabs").tabs();
    
    //load previous tab when opening settings page
    
    if($('#wp_custom_admin_interface_tab_memory').val().length > 1) {
    var tab = $('#wp_custom_admin_interface_tab_memory').val();    
    var index = $(tab).index() - 1;
    $('#tabs').tabs({
        active: index
    });
    }

    //make links go to particular tabs
    
    $('.wrap').on("click", ".open-tab", function () {
        var tab = $(this).attr('href');
        var index = $(tab).index() - 1;
        $('#tabs').tabs({
            active: index
        });
        //add link to hidden link setting as well
        $('#wp_custom_admin_interface_tab_memory').val(tab);
    });
    
    
    //add link to hidden link setting when a tab is clicked
    $('.wrap').on("click", ".nav-tab", function () {
        var tab = $(this).attr('href');
        $('#wp_custom_admin_interface_tab_memory').val(tab);
    });
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    


    //hides and then shows on click help tooltips
    $(".hidden").hide();
    $(".information-icon").click(function (event) {
        event.preventDefault();
        $(this).next(".hidden").slideToggle();
    });
    
    
    //instantiates the Wordpress colour picker
    $('.my-color-field').wpColorPicker();
    
   
   
    

    
   //makes image upload field 
   $('.postbox').on("click",".wp_custom_admin_interface_media_upload_button", function(e){
        e.preventDefault();
        
        var previousInput = $(this).prev(); 
       
        var image = wp.media({ 
            title: 'Upload Image',
            // mutiple: true if you want to upload multiple files at once
            multiple: false
        }).open()
        .on('select', function(e){
            // This will return the selected image from the Media Uploader, the result is an object
            var uploaded_image = image.state().get('selection').first();
            // We convert uploaded_image to a JSON object to make accessing it easier
            var image_url = uploaded_image.toJSON().url;
            // Let's assign the url value to the input field
            
            previousInput.val(image_url);

        });
    });
    
   
    //clipboard function
    new Clipboard('.clipboard');
    
    $('.clipboard').click(function(event){
        event.preventDefault(); 
        
        $(this).text("Copied!");
        
        setTimeout(function() { $('.clipboard').text("Copy Settings"); }, 2000);
    });
    
    
    
    
    
    
    
    
    
    //import settings
    $('#import-settings').click(function (event) {
    event.preventDefault();   
            
    $(".postbox .notice-error").fadeOut("slow", function(){
        $(".import-status-message").remove();
    })    
        
    var settings = $('#wp_custom_admin_interface_import_settings').val();
    var security = $('#wp_custom_admin_interface_import_settings').attr('data'); 
        
    console.log(settings);    
    
    //do request    
        var data = {
            'action': 'import_settings',
            'settings': settings,
            'security': security,
        };


            jQuery.post(ajaxurl, data, function (response) {
            
                if(response == "success") {
                    $('<div class="notice notice-info is-dismissible import-status-message"><p>Settings imported, the page will refresh automatically in 3 seconds.</p></div>').insertAfter('#import-settings');
                    setTimeout(location.reload.bind(location), 3000);     
                } else {
                    $('<div class="notice notice-error is-dismissible import-status-message"><p>'+response+'</p></div>').insertAfter('#import-settings');
                        
                }
            });
    
    
    });
    
    
    
    //delete plugin settings
    $('#delete-settings').click(function (event) {
        event.preventDefault();   
            
        $(".postbox .notice-error").fadeOut("slow", function(){
            $(".delete-status-message").remove();
        }) 


        var confirmation = confirm('Are you sure you want to delete all plugin settings?');    

        if(confirmation == true) {    



            var security = $('#delete-settings').attr('data'); 


            //do request    
                var data = {
                    'action': 'delete_settings',
                    'security': security,
                };


                    jQuery.post(ajaxurl, data, function (response) {

                        $('<div class="notice notice-info is-dismissible delete-status-message"><p>All plugin settings have been deleted.</p></div>').insertAfter('#delete-settings');
                        
                        setTimeout(function() {
                            $('.delete-status-message').slideUp();
                        }, 5500);

                    });   

        } //end confirmation 

  
    });
    
    
    
    

    
    
    
    
    
    
    

    
    
    //initialise datepicker
    if($('.datepicker').length){    
    $('.datepicker').datepicker({  
    dateFormat:"yy-mm-dd",    
    });   
    } 
    
    

    //adds shortcode button text to footer tinymce area  
    $('.wp_custom_admin_interface_append_buttons_footer_text').click(function () {
        
        $('#wp_custom_admin_interface_custom_footer_ifr').contents().find("#tinymce p").html( $('#wp_custom_admin_interface_custom_footer_ifr').contents().find("#tinymce p").html() +$(this).attr("value"));
        
        $('#wp-wp_custom_admin_interface_custom_footer-editor-container').find("textarea").html( $('#wp-wp_custom_admin_interface_custom_footer-editor-container').find("textarea").html() +$(this).attr("value"));
        
    });
    
    //adds shortcode button text to widget tinymce area  
    $('.wp_custom_admin_interface_append_buttons_widget_text').click(function () {
        
        $('#wp_custom_admin_interface_custom_widget_content_ifr').contents().find("#tinymce p").html( $('#wp_custom_admin_interface_custom_widget_content_ifr').contents().find("#tinymce p").html() +$(this).attr("value"));
        
        $('#wp-wp_custom_admin_interface_custom_widget_content-editor-container').find("textarea").html( $('#wp-wp_custom_admin_interface_custom_widget_content-editor-container').find("textarea").html() +$(this).attr("value"));
        
    });
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
   
    
    
    
    
    
    
    
    
    
    // ******************************* CUSTOMISE ADMIN MENU PAGE ***************************//
    
    

        
        
    
    
    //function to render the admin menu manager taking the menu and submenu parameters given to it to build out the menu
    function renderAdminMenuManager (menu, submenu) {
        
        //lets remove all items inside existing div (if they should exist), this is used when restoring the menu from the last save or loading the default WordPress menu
        $('#admin-menu-manager').empty();
        var packagedAdminMenuManager = '';

        //declare input variables
        var menuInput = menu;
        var subMenuInput = submenu;
        
        //get the inputs and decode the base64 and put it into JSON format so we can play with it later
        var topLevelMenuSettingDecodedAndParsed = JSON.parse(atob(menuInput));
        var subLevelMenuSettingDecodedAndParsed = JSON.parse(atob(subMenuInput));
                
        
        //for development purposes render this JSON representation of the inputs
//        console.log(topLevelMenuSettingDecodedAndParsed);
//        console.log(subLevelMenuSettingDecodedAndParsed);
        

        //loop through each item in the top level of the menu
        for(key in topLevelMenuSettingDecodedAndParsed) {
            
            //declare a variable which grabs the classes of the top level menu item
            var separatorCheck = topLevelMenuSettingDecodedAndParsed[key][4];
            
            //check to see if the item is a separator or a normal top level menu item
            if(separatorCheck.indexOf('wp-menu-separator') !== -1) {
                
                //the menu item is a separator so let's output a visual representation of a separator
                packagedAdminMenuManager += '<li class="mjs-nestedSortable-no-nesting menu-item"><div class="menu-item-separator"><span class="hr-container"><hr class="separator-rule"></span><i class="fa fa-trash-o delete-menu-item delete-separator" title="Remove separator" aria-hidden="true"></i></div></li>';

            } else {
                
                
                //this function is required to remove notification numbers from labels
                function removeNotificationsFromLabels (input){
                    //declare the input
                    var originalText = input;
                    //check to see if a span exists as this means there's a number
                    if(originalText.indexOf('<span') !== -1) {
                        //find the position of the span and lets get just the content before the span
                        var positionOfSpan = originalText.indexOf('<span');
                        return originalText.substr(0,positionOfSpan-1); 
                    } else {
                        //otherwise just leave the text how it is
                        return originalText;
                    }
                }
                
                //the item isn't a separator so let's output a visual representation of the main menu
                //first lets declare the variables which grabs the menu label, menu URL and menu icon
                var topLevelMenuLabel =  removeNotificationsFromLabels(topLevelMenuSettingDecodedAndParsed[key][0]);
                var topLevelMenuURL = topLevelMenuSettingDecodedAndParsed[key][2];
                var topLevelIcon = topLevelMenuSettingDecodedAndParsed[key][6];
                var topLevelClasses = topLevelMenuSettingDecodedAndParsed[key][4];
                var topLevelThirdValue = decodeURIComponent(topLevelMenuSettingDecodedAndParsed[key][3]);
                var topLevelFifthValue = decodeURIComponent(topLevelMenuSettingDecodedAndParsed[key][5]);
                var topLevelMenuCapability = topLevelMenuSettingDecodedAndParsed[key][1];


                //let's see if the icon of the top level menu item is a dashicon or a custom svg
                if(topLevelIcon.indexOf('dashicons-') !== -1) {
                    
                    //ok so the item is a dashicon so let's output this code to render the dashicon
                    var topLevelIconOutput = '<span data="'+topLevelIcon+'" class="menu-item-icon dashicons-before '+topLevelIcon+'"></span>'; 
                    
                } else {
                    
                    //ok so the item is a custom svg icon so let's output this code to render the icon, we need to use the background image in CSS to render the SVG
                    var topLevelIconOutput = '<span data="'+topLevelIcon+'" class="svg svg-menu-icon menu-item-icon" style="background-image: url(&quot;'+topLevelIcon+'&quot;);"></span>';
                    
                }
                

                //let's now output the top level menu item using the variables declared above
                packagedAdminMenuManager += '<li class="menu-item"><div>'+topLevelIconOutput+'<input readonly="readonly" type="text" data="'+topLevelMenuURL+'" class="menu-label" value="'+topLevelMenuLabel+'"><i class="fa fa-pencil-square-o edit-menu-item" title="Edit menu label" aria-hidden="true"></i><input readonly="readonly" type="text" data="'+topLevelMenuURL+'" class="menu-url restricted-advanced-functionality" style="margin-left:20px;" value="'+topLevelMenuURL+'"><i class="restricted-advanced-functionality fa fa-link edit-menu-item-link" title="Edit menu link" aria-hidden="true"></i><input readonly="readonly" type="text" data="'+topLevelClasses+'" class="menu-classes restricted-advanced-functionality" style="margin-left:20px;" value="'+topLevelClasses+'"><i class="restricted-advanced-functionality fa fa-code edit-menu-item-classes" title="Edit menu classes" aria-hidden="true"></i>'+adminCampailitiesSelect(topLevelMenuCapability)+'<input readonly="readonly" type="text" data="'+topLevelThirdValue+'" class="menu-third-value" style="margin-left:20px;" value="'+topLevelThirdValue+'"><input readonly="readonly" type="text" data="'+topLevelFifthValue+'" class="menu-fifth-value" style="margin-left:20px;" value="'+topLevelFifthValue+'"><i class="fa fa-eye-slash remove-menu-item" title="Hide menu item" aria-hidden="true"></i></div>';

                //let's now declare a variable which gets the appropriate sub menu item for this particular top level menu item
                var subLevelObject = subLevelMenuSettingDecodedAndParsed[topLevelMenuURL];
                
                //check if sub leve menus exist otherwise do nothing
                if (subLevelObject != null){

                    packagedAdminMenuManager += '<ul>';
                    //let's loop through each sub menu item for the top level menu item as there could be multiple sub level menu items
                    for (key in subLevelObject) {

                        //declare variables for the label and URL
                        var subLevelMenuLabel = removeNotificationsFromLabels(subLevelObject[key][0]);
                        var subLevelMenuURL = subLevelObject[key][2];
                        var subLevelMenuCapability = subLevelObject[key][1];
                        var subLevelMenuThirdValue = decodeURIComponent(subLevelObject[key][3]);

                        //lets output the sub menu items using our above variables
                        packagedAdminMenuManager += '<li class="menu-item"><div><span data="dashicons-admin-generic" class="menu-item-icon dashicons-before dashicons-admin-generic"></span><input readonly="readonly" type="text" data="'+topLevelMenuURL+'['+subLevelMenuURL+']" class="menu-label" value="'+subLevelMenuLabel+'"><i class="fa fa-pencil-square-o edit-menu-item" title="Edit menu label" aria-hidden="true"></i><input readonly="readonly" type="text" data="'+subLevelMenuURL+'" class="menu-url restricted-advanced-functionality" style="margin-left:20px;" value="'+subLevelMenuURL+'"><i class="restricted-advanced-functionality fa fa-link edit-menu-item-link" title="Edit menu link" aria-hidden="true"></i><input readonly="readonly" type="text" data="menu-top" class="menu-classes restricted-advanced-functionality" style="margin-left:20px;" value="menu-top"><i class="restricted-advanced-functionality fa fa-code edit-menu-item-classes" title="Edit menu classes" aria-hidden="true"></i>'+adminCampailitiesSelect(subLevelMenuCapability)+'<input readonly="readonly" type="text" data="" class="menu-third-value" style="margin-left:20px;" value="'+subLevelMenuThirdValue+'"><input readonly="readonly" type="text" data="" class="menu-fifth-value" style="margin-left:20px;" value=""><i class="fa fa-eye-slash remove-menu-item" title="Hide menu item" aria-hidden="true"></i></div></li>';    
                    }
                    
                    packagedAdminMenuManager += '</ul>';
                }
                
                packagedAdminMenuManager += '</li>';
            }

        }
        $('#admin-menu-manager').append(packagedAdminMenuManager);
        
          
    }
    
    //render the menu on load using the current saved settings
    renderAdminMenuManager($('#wp_custom_admin_interface_top_level_menu').val(), $('#wp_custom_admin_interface_sub_level_menu').val()); 
    
    
    
    
    
    
    
    
    
    
   //lets create our capabilities select
    function adminCampailitiesSelect(existingCapability) {
        
        var adminCapabilities = adminCapabilitiesArray();
        var adminCapabilitiesLength = adminCapabilities.length;
        
        var capabilitySelect = '<select style="margin-left:20px; width: 180px;" disabled="true" class="restricted-advanced-functionality menu-capability">';
        
        for (var i=0; i<adminCapabilitiesLength; i++) {
            
            if(existingCapability == adminCapabilities[i]) {
                capabilitySelect += '<option selected="selected">'+adminCapabilities[i]+'</option>';      
            } else {
                capabilitySelect += '<option>'+adminCapabilities[i]+'</option>';    
            }    
            
        }
        
        capabilitySelect += '</select><i class="restricted-advanced-functionality fa fa-lock edit-menu-capability" title="Edit menu access" aria-hidden="true"></i>';

        return capabilitySelect;    

    }
                 
    
    
    
    
    
    
    
    
    
    
 
    
    
    
    
    
    
    //restore menu to WordPress default
    $('#restore-default-menu').click(function (event) {
    event.preventDefault();  
    
    var confirmation = confirm('Are you sure you want to restore the admin menu to the default WordPress menu? This will delete any customisations made to the menu.');    
    
        if(confirmation == true) {    

            //get variables from button        
            var menu = $('#restore-default-menu').attr('menudata');
            var submenu = $('#restore-default-menu').attr('submenudata');
                        
            var myNewObject = JSON.parse(atob(menu));
            
            //lets set the setting input with the default WordPress values
            $('#wp_custom_admin_interface_top_level_menu').val(menu);
            $('#wp_custom_admin_interface_sub_level_menu').val(submenu);
            $('#wp_custom_admin_interface_remove_menu_item').val('');


            //now lets render the admin menu manager with the original values
            renderAdminMenuManager(menu,submenu);
            
            //re-assign labels appropriate classes
            assignLabelsAppropriateClasses();
            
            //maintain advanced functionality where appropriate
            setAdvancedFunctionality();

            //lets render a success message
            $('<div class="notice notice-info is-dismissible restore-menu-message"><p>The menu has been successfully restored to the default WordPress menu. Please press "Save All Settings" to save the changes.</p></div>').insertAfter('#admin-menu-manager-buttons');
            
            setTimeout(function() {
                $('.restore-menu-message').slideUp();
            }, 5500);
            
        } 
    });
    
    //restore menu to last save
    $('#restore-last-save').click(function (event) {
    event.preventDefault();  
    
    var confirmation = confirm('Are you sure you want to restore the admin menu to the last save you did? This will delete any edits you have just done.');    
    
        if(confirmation == true) {    

            //get variables from button        
            var menu = $('#restore-last-save').attr('menudata');
            var submenu = $('#restore-last-save').attr('submenudata');
            var removedItems = $('#restore-last-save').attr('removeditems');

            //lets set the setting input with the default WordPress values
            $('#wp_custom_admin_interface_top_level_menu').val(menu);
            $('#wp_custom_admin_interface_sub_level_menu').val(submenu);
            $('#wp_custom_admin_interface_remove_menu_item').val(removedItems);


            //now lets render the admin menu manager with the original values
            renderAdminMenuManager(menu,submenu);
            
            //re-assign labels appropriate classes
            assignLabelsAppropriateClasses();
            
            //maintain advanced functionality where appropriate
            setAdvancedFunctionality();

            //lets render a success message
            $('<div class="notice notice-info is-dismissible restore-menu-message"><p>The menu has been successfully restored to the previous save. Please press "Save All Settings" to save the changes.</p></div>').insertAfter('#admin-menu-manager-buttons');
            
            setTimeout(function() {
                $('.restore-menu-message').slideUp();
            }, 5500);
            
        } 
    });    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    //add menu item
    $('#poststuff').on("click", "#add-menu-item", function (event) {
        event.preventDefault(); 
        

        $('#admin-menu-manager').prepend('<li class="menu-item menu-item-custom"><div><span data="dashicons-admin-generic" class="menu-item-icon dashicons-before dashicons-admin-generic"></span><input readonly="readonly" type="text" data="" class="menu-label" value="" placeholder="Enter menu label"><i class="fa fa-pencil-square-o edit-menu-item" title="Edit menu label" aria-hidden="true"></i><input readonly="readonly" type="text" data="" class="menu-url" style="margin-left:20px;" value="" placeholder="Enter menu link"><i class="fa fa-link edit-menu-item-link" title="Edit menu link" aria-hidden="true"></i><input readonly="readonly" type="text" data="menu-top added-custom-menu-item" class="menu-classes restricted-advanced-functionality" style="margin-left:20px;" value="menu-top added-custom-menu-item"><i class="restricted-advanced-functionality fa fa-code edit-menu-item-classes" title="Edit menu classes" aria-hidden="true"></i>'+adminCampailitiesSelect('read')+'<input readonly="readonly" type="text" data="" class="menu-third-value" style="margin-left:20px;" value=""><input readonly="readonly" type="text" data="" class="menu-fifth-value" style="margin-left:20px;" value=""><i class="fa fa-eye-slash remove-menu-item" title="Hide menu item" aria-hidden="true"></i><i class="fa fa-trash-o delete-menu-item delete-custom-menu-item" title="Remove menu item" aria-hidden="true"></i></div></li>'); 
        
        //maintain advanced functionality where appropriate
        setAdvancedFunctionality();
        
        
    });
    
    
    //add delete menu item icon to custom icons
    function addTrashIconToCustomMenuItems(){
     
        var targetElements = $('#admin-menu-manager .menu-item div');

        for (var i = 0; i < targetElements.length; ++i) {

            var currentItem = targetElements[i];

            var menuItemClassValue = $(currentItem).find('.menu-classes').val() || "";

            if(menuItemClassValue.indexOf('added-custom-menu-item') !== -1){
                $(currentItem).append('<i class="fa fa-trash-o delete-menu-item delete-custom-menu-item" title="Remove menu item" aria-hidden="true"></i>');
            }
        }    
    }
    //execute on load
    addTrashIconToCustomMenuItems();
    
    
    
    
    
    

    
    //add separator
    $('.wrap').on("click", "#add-separator", function (event) {
        
        event.preventDefault(); 
        
        $('#admin-menu-manager').prepend('<li class="mjs-nestedSortable-no-nesting menu-item"><div class="menu-item-separator"><span class="hr-container"><hr class="separator-rule"></span><i class="fa fa-trash-o delete-menu-item delete-separator" title="Remove separator" aria-hidden="true"></i></div></li>');
        
    });
    
    
    
    
    
    //advanced functionality
    $('.wrap').on("click", "#advanced-menu-functionality", function (event) {
        
        event.preventDefault(); 
        
        if( $('.restricted-advanced-functionality').css('display') == 'inline-block') {
            
            $('.restricted-advanced-functionality').css({"display":"none"});  
            $('#advanced-menu-functionality').html('<i class="fa fa-superpowers" aria-hidden="true"></i> Advanced functionality');
            
        } else {
        
            new Clipboard('#advanced-menu-functionality');

            var confirmation = confirm('With great power comes great responsibility! With this option enabled you have the potential to do edits on the default WordPress menu options. But this also means that you may not be able to find your way back here if you start hiding all the standard menus! As a precaution we have copied an emergency URL to your clipboard. So if you get stuck just paste this into the browser and all settings related to this custom admin menu will be deleted so you can start again. This URL can also be found in the FAQ section of the Wordpress plugin website.');    

            if(confirmation == true) {
                $('.restricted-advanced-functionality').css({"display":"inline-block"});
                $('#advanced-menu-functionality').html('<i class="fa fa-universal-access" aria-hidden="true"></i> Simple functionality');
            }
        
        }
        
        
    });
    
    

    
    //function to check current status of advanced functionality and continue this setting through procedures like restoration and adding of new menus
    function setAdvancedFunctionality(){
        
        if( $('.restricted-advanced-functionality').css('display') == "none") {
            
            $('.restricted-advanced-functionality').css({"display":"none"});  
            
        } else {
            
             $('.restricted-advanced-functionality').css({"display":"inline-block"});     
            
        }
 
    }
    
    
    
    //function to set the default of the advanced functionality to hidden
    function setDefaultStyleForAdvancedFunctionality(){
        $('.restricted-advanced-functionality').css({"display":"none"});       
    }
    setDefaultStyleForAdvancedFunctionality();
    
    
    
    
    //function to force advanced functionality
    function forceAdvancedFunctionality(){
        
        if( $('.restricted-advanced-functionality').css('display') == "none") {
            $('.restricted-advanced-functionality').css({"display":"inline-block"});
            $('#advanced-menu-functionality').html('<i class="fa fa-universal-access" aria-hidden="true"></i> Simple functionality');     
        }
        
    }
    
    
    

    
    
    //remove a menu item
    $('.wrap').on("click", ".delete-menu-item", function () {
        
        var confirmation = confirm('Are you sure you want to delete this menu item?');    
    
        if(confirmation == true) {  
            
            $(this).parent().parent().remove(); 

        }
    });
    
    
    
    
    //make input field editable
    $('.wrap').on("click", ".edit-menu-item", function () {
    
        var currentStateReadOnly = $(this).prev().prop('readonly');
        
        if(currentStateReadOnly == true) {
            $(this).prev().prop('readonly',false);
            $(this).removeClass("fa-pencil-square-o");
            $(this).addClass("fa-check");
            
        } else {
            $(this).prev().prop('readonly',true);
            $(this).addClass("fa-pencil-square-o");
            $(this).removeClass("fa-check");
        }
    });
    
    
    //make input field url editable
    $('.wrap').on("click", ".edit-menu-item-link", function () {
    
        var currentStateReadOnly = $(this).prev().prop('readonly');
        
        if(currentStateReadOnly == true) {
            $(this).prev().prop('readonly',false);
            $(this).removeClass("fa-link");
            $(this).addClass("fa-check");
            
        } else {
            $(this).prev().prop('readonly',true);
            $(this).addClass("fa-link");
            $(this).removeClass("fa-check");
        }
    });
    
    
    //make input field classes editable
    $('.wrap').on("click", ".edit-menu-item-classes", function () {
    
        var currentStateReadOnly = $(this).prev().prop('readonly');
        
        if(currentStateReadOnly == true) {
            $(this).prev().prop('readonly',false);
            $(this).removeClass("fa-code");
            $(this).addClass("fa-check");
            
        } else {
            $(this).prev().prop('readonly',true);
            $(this).addClass("fa-code");
            $(this).removeClass("fa-check");
        }
    });
    
    //make input field capability editable
    $('.wrap').on("click", ".edit-menu-capability", function () {
    
        var currentStateReadOnly = $(this).prev().prop('disabled');
        
        if(currentStateReadOnly == true) {
            $(this).prev().prop('disabled',false);
            $(this).removeClass("fa-lock");
            $(this).addClass("fa-check");
            
        } else {
            $(this).prev().prop('disabled',true);
            $(this).addClass("fa-lock");
            $(this).removeClass("fa-check");
        }
    });
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    //code to add and remove items from input when clicking the hide icon

    $('.wrap').on("click", ".remove-menu-item", function () {
        
        //get the name of the menu item
        var menuItemContainer = $(this).parent().parent();
        
        if($(menuItemContainer).hasClass('removed-menu-item')){
            $(menuItemContainer).removeClass("removed-menu-item");    
            $(this).removeClass("fa-eye");
            $(this).addClass("fa-eye-slash");
        } else {
            $(menuItemContainer).addClass("removed-menu-item");
            $(this).addClass("fa-eye");
            $(this).removeClass("fa-eye-slash");       
        }
        
    });
    
    
    //on load assign appropriate classes
    //for each menu item check if in array, and if in array add class
    function assignLabelsAppropriateClasses() {
        
        var removeMenuItems = $('#wp_custom_admin_interface_remove_menu_item').val();

        if (removeMenuItems != null) {
            var removeMenuItemsArray = removeMenuItems.split(',');
        }
        
        $('.menu-label').each(function( index ) {
            var menuItemName = $(this).attr('data'); 
            var menuItemContainer = $(this).parent().parent();
            var menuIcon = $(this).parent().find('.remove-menu-item');
            
//            if(menuItemName.length < 1){} else {
                if ($.inArray(menuItemName, removeMenuItemsArray) != -1) {
                    $(menuItemContainer).addClass("removed-menu-item");
                    $(menuIcon).addClass("fa-eye");
                    $(menuIcon).removeClass("fa-eye-slash");
                } else {
                    $(menuItemContainer).removeClass("removed-menu-item");
                    $(this).removeClass("fa-eye");
                    $(this).addClass("fa-eye-slash");      
                } 
//            }
        });
    }
    //execute function on load
    assignLabelsAppropriateClasses();

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    //make icon show a tooltip
    //on click show the dialog, if already open close it
    $('.wrap').on("click", ".menu-item-icon", function () { 
                
        var originalIcon = this;
        
        
        if($('#custom-icon-dialog').hasClass('ui-dialog-content') &&  $('#custom-icon-dialog').dialog('isOpen')) {
            
            $( "#custom-icon-dialog" ).dialog("close");
            
        } else {
        
        $( "#custom-icon-dialog" ).dialog({
            
            modal: true,
            draggagle: true,
            width: 700,
            open: function ()
            {
            $('.ui-dialog-titlebar-close').blur();
            $('.wp_custom_admin_interface_media_upload_button').blur();
            $(this).unbind('click');
            }
            }); 
        
            

            //when selecting a new icon replace the existing icon and close the dialog
            $('#custom-icon-dialog').on("click", ".icon-for-selection", function () { 
                
                var selectedIconData = $(this).attr('data');
                
                if(selectedIconData.indexOf('dashicons-') !== -1) {
                    //if icon is a dashicon remove existing classes and add new classes
                    $(originalIcon).parent().prepend('<span data="'+selectedIconData+'" class="menu-item-icon dashicons-before '+selectedIconData+'"></span>');     
                    $(originalIcon).remove();
   
                } else {
                    $(originalIcon).parent().prepend('<span data="'+selectedIconData+'" class="svg svg-menu-icon menu-item-icon" style="background-image: url(&quot;'+selectedIconData+'&quot;)"></span>');     
                    $(originalIcon).remove();
                }
                
                
                $( "#custom-icon-dialog" ).dialog("close");

            });
            
            
            
            //when uploading a custom icon
            $('#custom-icon-dialog').on("click",".wp_custom_admin_interface_media_upload_button", function(e){
                e.preventDefault();


                var image = wp.media({ 
                    title: 'Upload Image',
                    // mutiple: true if you want to upload multiple files at once
                    multiple: false
                }).open()
                .on('select', function(e){
                    // This will return the selected image from the Media Uploader, the result is an object
                    var uploaded_image = image.state().get('selection').first();
                    // We convert uploaded_image to a JSON object to make accessing it easier
                    var image_url = uploaded_image.toJSON().url;
                    // Let's assign the url value to the input field

                    $(originalIcon).parent().prepend('<span data="'+image_url+'" class="svg svg-menu-icon menu-item-icon" style="background-image: url(&quot;'+image_url+'&quot;)"></span>');     
                    $(originalIcon).remove();
                    $( "#custom-icon-dialog" ).dialog("close");
                        

                });
            });
            

            
        }
        

    });


    //add sortable functionality
    $('#admin-menu-manager').nestedSortable({
			handle: 'div',
			items: 'li',
			toleranceElement: '> div',
            maxLevels: 2,
            listType: 'ul',
            isTree: true
	});
    
    
    //function to create an array containing admin capabilities
    function adminCapabilitiesArray(){
        
       var adminCapabilities = $('#admin-capabilities').text(); 
                
        if (adminCapabilities != null) {
            var adminCapabilitiesArray = adminCapabilities.split(',');
        }
                
        return adminCapabilitiesArray;
        
    }
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    // ******************************* PRESAVE ROUTINE ***************************//
    //on the click of our pre-submit button carry out the following save functions, after the save functions press the actual save button
    
//    $('.wrap').on("click", "#pre-submit", function (event) {
//    
//    //prevent the form from submitting    
//    event.preventDefault(); 
//        
//    
//        
//    //OPERATION ONE, LETS RELABEL THE DATA ATTRIBUTES OF HIDDEN MENU ITEMS AND ADD THE ITEMS TO THE ITEMS TO BE HIDDEN SETTING    
//    //lets declare a variable that will hold all our new values
//    var itemsToBeHidden = '';    
//       
//    //first lets target the top level data attributes which need to be relabeled
//    $('#admin-menu-manager > .removed-menu-item > div').each(function(index) {
//        var removedItemsURL = $(this).find('.menu-url').val(); 
//        
//        $(this).find('.menu-label').attr('data',removedItemsURL);
//        itemsToBeHidden += removedItemsURL+',';
//        
//    });
//                                                       
//    //second lets target the sub level data attributes which need to be relabeled
//    $('#admin-menu-manager > li > ul > .removed-menu-item').each(function(index) {
//        var removedItemsURL = $(this).find('.menu-url').val(); 
//        var parentItemsURL = $(this).parent().prev().find('.menu-label').attr('data');
//        var newDataValue = parentItemsURL+'['+removedItemsURL+']';
//        $(this).find('.menu-label').attr('data',newDataValue); 
//        itemsToBeHidden += newDataValue+',';
//    });
//    
//    //let's set the new value
//    $('#wp_custom_admin_interface_remove_menu_item').val(itemsToBeHidden); 
//         
//        
//     
//        
//     
//        
//    //OPERATION TWO, HERE WE ARE GOING TO CHECK FOR DUPLICATES IN THE TOP LEVEL MENU
//    //lets remove any previous error classes
//    $('.duplication-error').removeClass('duplication-error');     
//        
//    //lets create an array whcih will hold our top level data attributes
//    var topLevelMenuURLArray = [];  
//        
//    //lets cycle through all top level menu items
//    $('#admin-menu-manager > .menu-item > div').each(function() {
//        var removedItemsURL = $(this).find('.menu-url').val(); 
//
//        topLevelMenuURLArray.push(removedItemsURL);
//        
//    });
//    
//
//    //now lets check for duplicates in array    
//    var topLevelMenuURLSortedArray = topLevelMenuURLArray.slice().sort();
//    
//    //create an array to hold duplicates    
//    var topLevelMenuURLDuplicates = [];
//    
//    //for each item in the original array push the duplicates into the new array    
//    for (var i=0; i < topLevelMenuURLArray.length -1; i++) {
//        
//        if (topLevelMenuURLSortedArray[i + 1] == topLevelMenuURLSortedArray[i]) {
//            
//        if(topLevelMenuURLSortedArray[i] != null){    
//        topLevelMenuURLDuplicates.push(topLevelMenuURLSortedArray[i]);
//        }
//        }    
//        
//    }   
//        
//    if(topLevelMenuURLDuplicates.length > 0) {
//        
//        var errors = true;
//        
//        alert('We found there were 2 or more items in the top level of your menu that have the same destination URL. This can cause unexpected results. As a result we won\'t save the settings until the issue is corrected. We have highlighted these items red. Please change one of the URL\'s or delete one of the menu items.');
//        
//        $.each(topLevelMenuURLDuplicates,function(key,value) {
//        
//            var duplicatedItem = value;
//            
//            $('#admin-menu-manager > .menu-item > div').each(function() {
//                
//                var removedItemsURL = $(this).find('.menu-url').val();
//                var removedItemsURLField = $(this).find('.menu-url');
//                
//                if (removedItemsURL == duplicatedItem) {
//                    //add a class to highlight the errors
//                    $(removedItemsURLField).addClass('duplication-error');
//                    //force the advanced functionality so people can actually see the URL field
//                    forceAdvancedFunctionality();
//                }
//                
//             });
//            
//        });
//        
//        
//    } else {
//
//        var errors = false;
//        
//    }    
//        
//
//        
//
//    //OPERATION THREE, MAKE SURE EVERY MENU ITEM HAS A URL    
//        
//    //lets remove any previous error classes
//    $('.no-url-value').removeClass('no-url-value');    
//    
//    //lets declare a variable which will contain the error count    
//    var noURLCount = 0;      
//        
//    $('#admin-menu-manager .menu-url').each(function() {
//        
//        var urlValue = $(this).val(); 
//        
//        if(urlValue == ""){
//            
//            $(this).addClass('no-url-value');
//            noURLCount++;
//        }
//         
//    });   
//    
//    if(noURLCount >0){
//        
//        alert('We found that some of your menu items have no URL. Please make sure every item has a URL. As a result we won\'t save the settings until the issue is corrected. We have highlighted these items red.');
//        
//        errors = true;
//        forceAdvancedFunctionality();    
//    }    
//        
//
//        
//        
//        
//        
//        
//        
//    //OPERATION FOUR, CREATE ARRAY WHICH WILL SET THE SETTING FOR THE TOP LEVEL MENU
//    
//
//    //lets do the top menu    
//    var topLevelMenuArray = [];
//    
//        
//    //variable to hold our random numbers which is used as part of the id for separators    
//    var startCount = 0;
//       
//        
//    $('#admin-menu-manager > li').each(function( index ) {
//        
//
//        
//        
//        //for normal menu items
//        //item 0
//        var topLevelMenuItemLabel = $(this).find('.menu-label').val();
//        //item 1
//        var topLevelMenuItemCapability = $(this).find('.menu-capability').val();
//        //item 2
//        var topLevelMenuItemLink = $(this).find('.menu-url').val();
//        //item 3
//        var topLevelMenuItemThird = encodeURIComponent($(this).find('.menu-third-value').val()).replace(/%20/g, " ");
//        //item 4
//        var topLevelMenuItemClasses = $(this).find('.menu-classes').val();
//        //item 5    
//        var topLevelMenuItemFifth = encodeURIComponent($(this).find('.menu-fifth-value').val()).replace(/%20/g, " ");
//        //item 6
//        var topLevelMenuItemIcon = $(this).find('.menu-item-icon').attr('data');
//        
//        
//        //for separators
//        //item 0
//        var separatorMenuItemZero = '';
//        //item 1
//        var separatorMenuItemOne = 'read';
//        //item 2
//        var separatorMenuItemTwo = 'separator-'+startCount;
//        startCount ++;
//        //item 3
//        var separatorMenuItemThree = '';
//        //item 4
//        var separatorMenuItemFour = 'wp-menu-separator';
//        
//        
//        
//        if(topLevelMenuItemLabel == null) {
//            
//            var topLevelMenuItemArray = [separatorMenuItemZero,separatorMenuItemOne,separatorMenuItemTwo,separatorMenuItemThree,separatorMenuItemFour];
//            
//            
//        } else {
//            
//            var topLevelMenuItemArray = [topLevelMenuItemLabel,topLevelMenuItemCapability,topLevelMenuItemLink,topLevelMenuItemThird,topLevelMenuItemClasses,topLevelMenuItemFifth,topLevelMenuItemIcon];
//                        
//        }
//        
//        topLevelMenuArray.push(topLevelMenuItemArray);
//        
//    });
//    
//    var stringifiedAndEncodedTopLevelMenuArray = btoa(JSON.stringify(topLevelMenuArray));    
//    $('#wp_custom_admin_interface_top_level_menu').val(stringifiedAndEncodedTopLevelMenuArray);    
//        
////    console.log(stringifiedAndEncodedTopLevelMenuArray);
//        
//    
//    
//        
//    //OPERATION FIVE, REMOVE ANY HIDDEN SEPARATORS IN THE THE SUB MENU    
//        
//    //lets delete any sneaky separators which may be hidden amongst the sub items     
//    $('#admin-menu-manager > li > ul > .mjs-nestedSortable-no-nesting').remove();    
//        
//        
//        
//    //OPERATION SIX, CREATE ARRAY WHICH WILL SET THE SETTING FOR THE SUB LEVEL MENU     
//    //lets do the sub menu     
//    var subLevelMenuObjectContainer = {};    
//        
//    $('#admin-menu-manager > li > ul').each(function( index ) {
//        
//        
//        
//        
//        var associatedTopLevelMenuItemLabel = $(this).parent().find('.menu-url').val();
//        
//        var $this = $(this);
//        var $subLevelUl = $(this).find("li");
//        
//        var subLevelMenuObject = {};
//        
//        $($subLevelUl).each(function( index ) {
//            
//            //item 0 -label
//            var subLevelMenuItemLabel = $(this).find('.menu-label').val(); 
//            //item 1 - permissions
//            var subLevelMenuItemCapability = $(this).find('.menu-capability').val();
//            //item 2 - url
//            var subLevelMenuItemLink = $(this).find('.menu-url').val();
//            //item 3 - unknown
//            var subLevelMenuItemThird = encodeURIComponent($(this).find('.menu-third-value').val()).replace(/%20/g, " ");
//            
//            
//            if(subLevelMenuItemThird == "undefined") {
//                
//                subLevelMenuItemArray = [subLevelMenuItemLabel,subLevelMenuItemCapability,subLevelMenuItemLink];
//                  
//            } else {
//                
//                subLevelMenuItemArray = [subLevelMenuItemLabel,subLevelMenuItemCapability,subLevelMenuItemLink,subLevelMenuItemThird];
//                
//            }
//            
//            subLevelMenuObject[index] = subLevelMenuItemArray; 
//            
//        }); 
//        
//        subLevelMenuObjectContainer[associatedTopLevelMenuItemLabel] = subLevelMenuObject;
//        
//    });    
//    
//        
//    var stringifiedAndEncodedSubLevelMenuObject = btoa(JSON.stringify(subLevelMenuObjectContainer));    
//    $('#wp_custom_admin_interface_sub_level_menu').val(stringifiedAndEncodedSubLevelMenuObject);     
//        
////     console.log(subLevelMenuObjectContainer);   
//        
//     
//      
//  
//    //OPERATION SEVEN, GRAB ALL EXCEPTIONS/INCLUSIONS AND ADD THEM TO THE SETTING FIELD     
//    //grab all exceptions/inclusions and add them to the exclusion setting field
//           
//    $('.userAndRoleSelection').each(function() {
//        
//        
//        var newExceptions = '';
//
//        var nextContainer = $(this).next().next();
//        
//        $.each(nextContainer.find('select'),function() {
//        
//            var exceptionCaseValue = $(this).val();
//
//            newExceptions += exceptionCaseValue+',';
//
//        });
//        
//        nextContainer.find('.saved_exception_cases').val(newExceptions);
//        
//          
//        
//    });
//        
//    
//        
//        
//        
//        
//        
//    //OPERATION EIGHT, LETS GET THE HIDDEN NODES FOR THE TOOLBAR AND ADD THEM TO THE SETTING   
//    //lets declare a variable that will hold all our new values
//    var nodesToBeHidden = '';    
//       
//    $('#toolbar-menu-manager li > div').each(function(index) {
//        
//        
//        if($(this).hasClass('removed-node-item')){
//        
//        var removedNodeId = $(this).find('.node-id').attr('data'); 
//                
//        nodesToBeHidden += removedNodeId+',';
//            
//        }
//        
//    });
//                                                       
//    //let's set the new value
//    $('#wp_custom_admin_interface_remove_toolbar_item').val(nodesToBeHidden);     
//        
//        
//        
//        
//        
//        
//        
//        
//        
//        //OPERATION NINE - LES SAVE THE TOOLBAR MENU AND PUT THE VALUE INTO THE SETTING
//        var nodeObjects = {};
//
//        //for each list item create the objects
//
//        $('#toolbar-menu-manager li > div').each(function( index ) {
//
//            var containerDiv = $(this);
//
//            var nodeGroup = (containerDiv.attr('data-group') === "true");
//            var nodeHref = containerDiv.find('.node-href').val();
//            
//            if(nodeHref == ""){
//               nodeHref = false; 
//            }
//            
//            
//            var nodeId = containerDiv.find('.node-id').attr('data');
//            var nodeMeta = [];
//            var nodeParent = containerDiv.parent().parent().prev().find('.node-id').attr('data');
//            if(nodeParent == null){
//               nodeParent = false;   
//            }
//            
//            var nodeTitle = containerDiv.find('.node-title').val();
//            if(nodeTitle == ""){
//               nodeTitle = false; 
//            }
//            
//            
//            var nodeObject = {group: nodeGroup, href: nodeHref, id: nodeId, meta: nodeMeta, parent: nodeParent, title: nodeTitle}
//            
//            //add the items to the object
//            nodeObjects[nodeId] = nodeObject;
//            
//        });
//        
////        console.log(nodeObjects);
//        
//        var stringifiedAndEncodedToolbarMenuObject = btoa(JSON.stringify(nodeObjects));    
//        $('#wp_custom_admin_interface_primary_toolbar_menu').val(stringifiedAndEncodedToolbarMenuObject);      
//
//        
//        
//        
// 
//
//    //now that we have carried out our pre-save routines let's actually save the settings by pressing the hidden save button  
//    if(errors == false){
//        
//        //run ajax to clear the transients
//        var data = {
//            'action': 'delete_transients'
//        };
//
//        jQuery.post(ajaxurl, data, function (response) {
//            //we don't need to do anything
//        });
//
//        
//        //now submit the form
//        $("#submit").click();
//   
//        
//    }   
//          
//        
//    });
//    
    
    

    
    
    
    
    
    
    
    
//    function save_main_options_ajax() {
//           $('#custom_admin_interface_settings_form').submit( function () {
//               tinyMCE.triggerSave();
//                var b =  $(this).serialize();
//                $.post( 'options.php', b ).error( 
//                    function() {
//                        alert('error');
//                    }).success( function() {
//                        alert('success');   
//                    });
//                    return false;    
//                });
//            }
//    save_main_options_ajax();
//    
//    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    // ******************************* PRESAVE ROUTINE ***************************//
    $('#custom_admin_interface_settings_form').submit(function() { 
    
    
    //show loading message
    $('<div class="notice notice-warning is-dismissible settings-loading-message"><p><i class="fa fa-circle-o-notch wp-custom-admin-interface-loading" aria-hidden="true"></i> Please wait while we save the settings...</p></div>').insertAfter('.wp-custom-admin-interface-save-button');
        
        
    //OPERATION ONE, LETS RELABEL THE DATA ATTRIBUTES OF HIDDEN MENU ITEMS AND ADD THE ITEMS TO THE ITEMS TO BE HIDDEN SETTING    
    //lets declare a variable that will hold all our new values
    var itemsToBeHidden = '';    
       
    //first lets target the top level data attributes which need to be relabeled
    $('#admin-menu-manager > .removed-menu-item > div').each(function(index) {
        var removedItemsURL = $(this).find('.menu-url').val(); 
        
        $(this).find('.menu-label').attr('data',removedItemsURL);
        itemsToBeHidden += removedItemsURL+',';
        
    });
                                                       
    //second lets target the sub level data attributes which need to be relabeled
    $('#admin-menu-manager > li > ul > .removed-menu-item').each(function(index) {
        var removedItemsURL = $(this).find('.menu-url').val(); 
        var parentItemsURL = $(this).parent().prev().find('.menu-label').attr('data');
        var newDataValue = parentItemsURL+'['+removedItemsURL+']';
        $(this).find('.menu-label').attr('data',newDataValue); 
        itemsToBeHidden += newDataValue+',';
    });
    
    //let's set the new value
    $('#wp_custom_admin_interface_remove_menu_item').val(itemsToBeHidden); 
         
        
     
        
     
        
    //OPERATION TWO, HERE WE ARE GOING TO CHECK FOR DUPLICATES IN THE TOP LEVEL MENU
    //lets remove any previous error classes
    $('.duplication-error').removeClass('duplication-error');     
        
    //lets create an array whcih will hold our top level data attributes
    var topLevelMenuURLArray = [];  
        
    //lets cycle through all top level menu items
    $('#admin-menu-manager > .menu-item > div').each(function() {
        var removedItemsURL = $(this).find('.menu-url').val(); 

        topLevelMenuURLArray.push(removedItemsURL);
        
    });
    

    //now lets check for duplicates in array    
    var topLevelMenuURLSortedArray = topLevelMenuURLArray.slice().sort();
    
    //create an array to hold duplicates    
    var topLevelMenuURLDuplicates = [];
    
    //for each item in the original array push the duplicates into the new array    
    for (var i=0; i < topLevelMenuURLArray.length -1; i++) {
        
        if (topLevelMenuURLSortedArray[i + 1] == topLevelMenuURLSortedArray[i]) {
            
        if(topLevelMenuURLSortedArray[i] != null){    
        topLevelMenuURLDuplicates.push(topLevelMenuURLSortedArray[i]);
        }
        }    
        
    }   
        
    if(topLevelMenuURLDuplicates.length > 0) {
        
        var errors = true;
        
        alert('We found there were 2 or more items in the top level of your menu that have the same destination URL. This can cause unexpected results. As a result we won\'t save the settings until the issue is corrected. We have highlighted these items red. Please change one of the URL\'s or delete one of the menu items.');
        
        $.each(topLevelMenuURLDuplicates,function(key,value) {
        
            var duplicatedItem = value;
            
            $('#admin-menu-manager > .menu-item > div').each(function() {
                
                var removedItemsURL = $(this).find('.menu-url').val();
                var removedItemsURLField = $(this).find('.menu-url');
                
                if (removedItemsURL == duplicatedItem) {
                    //add a class to highlight the errors
                    $(removedItemsURLField).addClass('duplication-error');
                    //force the advanced functionality so people can actually see the URL field
                    forceAdvancedFunctionality();
                }
                
             });
            
        });
        
        
    } else {

        var errors = false;
        
    }    
        

        

    //OPERATION THREE, MAKE SURE EVERY MENU ITEM HAS A URL    
        
    //lets remove any previous error classes
    $('.no-url-value').removeClass('no-url-value');    
    
    //lets declare a variable which will contain the error count    
    var noURLCount = 0;      
        
    $('#admin-menu-manager .menu-url').each(function() {
        
        var urlValue = $(this).val(); 
        
        if(urlValue == ""){
            
            $(this).addClass('no-url-value');
            noURLCount++;
        }
         
    });   
    
    if(noURLCount >0){
        
        alert('We found that some of your menu items have no URL. Please make sure every item has a URL. As a result we won\'t save the settings until the issue is corrected. We have highlighted these items red.');
        
        errors = true;
        forceAdvancedFunctionality();    
    }    
        

        
        
        
        
        
        
    //OPERATION FOUR, CREATE ARRAY WHICH WILL SET THE SETTING FOR THE TOP LEVEL MENU
    

    //lets do the top menu    
    var topLevelMenuArray = [];
    
        
    //variable to hold our random numbers which is used as part of the id for separators    
    var startCount = 0;
       
        
    $('#admin-menu-manager > li').each(function( index ) {
        

        
        
        //for normal menu items
        //item 0
        var topLevelMenuItemLabel = $(this).find('.menu-label').val();
        //item 1
        var topLevelMenuItemCapability = $(this).find('.menu-capability').val();
        //item 2
        var topLevelMenuItemLink = $(this).find('.menu-url').val();
        //item 3
        var topLevelMenuItemThird = encodeURIComponent($(this).find('.menu-third-value').val()).replace(/%20/g, " ");
        //item 4
        var topLevelMenuItemClasses = $(this).find('.menu-classes').val();
        //item 5    
        var topLevelMenuItemFifth = encodeURIComponent($(this).find('.menu-fifth-value').val()).replace(/%20/g, " ");
        //item 6
        var topLevelMenuItemIcon = $(this).find('.menu-item-icon').attr('data');
        
        
        //for separators
        //item 0
        var separatorMenuItemZero = '';
        //item 1
        var separatorMenuItemOne = 'read';
        //item 2
        var separatorMenuItemTwo = 'separator-'+startCount;
        startCount ++;
        //item 3
        var separatorMenuItemThree = '';
        //item 4
        var separatorMenuItemFour = 'wp-menu-separator';
        
        
        
        if(topLevelMenuItemLabel == null) {
            
            var topLevelMenuItemArray = [separatorMenuItemZero,separatorMenuItemOne,separatorMenuItemTwo,separatorMenuItemThree,separatorMenuItemFour];
            
            
        } else {
            
            var topLevelMenuItemArray = [topLevelMenuItemLabel,topLevelMenuItemCapability,topLevelMenuItemLink,topLevelMenuItemThird,topLevelMenuItemClasses,topLevelMenuItemFifth,topLevelMenuItemIcon];
                        
        }
        
        topLevelMenuArray.push(topLevelMenuItemArray);
        
    });
    
    var stringifiedAndEncodedTopLevelMenuArray = btoa(JSON.stringify(topLevelMenuArray));    
    $('#wp_custom_admin_interface_top_level_menu').val(stringifiedAndEncodedTopLevelMenuArray);    
        
//    console.log(stringifiedAndEncodedTopLevelMenuArray);
        
    
    
        
    //OPERATION FIVE, REMOVE ANY HIDDEN SEPARATORS IN THE THE SUB MENU    
        
    //lets delete any sneaky separators which may be hidden amongst the sub items     
    $('#admin-menu-manager > li > ul > .mjs-nestedSortable-no-nesting').remove();    
        
        
        
    //OPERATION SIX, CREATE ARRAY WHICH WILL SET THE SETTING FOR THE SUB LEVEL MENU     
    //lets do the sub menu     
    var subLevelMenuObjectContainer = {};    
        
    $('#admin-menu-manager > li > ul').each(function( index ) {
        
        
        
        
        var associatedTopLevelMenuItemLabel = $(this).parent().find('.menu-url').val();
        
        var $this = $(this);
        var $subLevelUl = $(this).find("li");
        
        var subLevelMenuObject = {};
        
        $($subLevelUl).each(function( index ) {
            
            //item 0 -label
            var subLevelMenuItemLabel = $(this).find('.menu-label').val(); 
            //item 1 - permissions
            var subLevelMenuItemCapability = $(this).find('.menu-capability').val();
            //item 2 - url
            var subLevelMenuItemLink = $(this).find('.menu-url').val();
            //item 3 - unknown
            var subLevelMenuItemThird = encodeURIComponent($(this).find('.menu-third-value').val()).replace(/%20/g, " ");
            
            
            if(subLevelMenuItemThird == "undefined") {
                
                subLevelMenuItemArray = [subLevelMenuItemLabel,subLevelMenuItemCapability,subLevelMenuItemLink];
                  
            } else {
                
                subLevelMenuItemArray = [subLevelMenuItemLabel,subLevelMenuItemCapability,subLevelMenuItemLink,subLevelMenuItemThird];
                
            }
            
            subLevelMenuObject[index] = subLevelMenuItemArray; 
            
        }); 
        
        subLevelMenuObjectContainer[associatedTopLevelMenuItemLabel] = subLevelMenuObject;
        
    });    
    
        
    var stringifiedAndEncodedSubLevelMenuObject = btoa(JSON.stringify(subLevelMenuObjectContainer));    
    $('#wp_custom_admin_interface_sub_level_menu').val(stringifiedAndEncodedSubLevelMenuObject);     
        
//     console.log(subLevelMenuObjectContainer);   
        
     
      
  
    //OPERATION SEVEN, GRAB ALL EXCEPTIONS/INCLUSIONS AND ADD THEM TO THE SETTING FIELD     
    //grab all exceptions/inclusions and add them to the exclusion setting field
           
    $('.userAndRoleSelection').each(function() {
        
        
        var newExceptions = '';

        var nextContainer = $(this).next().next();
        
        $.each(nextContainer.find('select'),function() {
        
            var exceptionCaseValue = $(this).val();

            newExceptions += exceptionCaseValue+',';

        });
        
        nextContainer.find('.saved_exception_cases').val(newExceptions);
        
          
        
    });
        
    
        
        
        
        
        
    //OPERATION EIGHT, LETS GET THE HIDDEN NODES FOR THE TOOLBAR AND ADD THEM TO THE SETTING   
    //lets declare a variable that will hold all our new values
    var nodesToBeHidden = '';    
       
    $('#toolbar-menu-manager li > div').each(function(index) {
        
        
        if($(this).hasClass('removed-node-item')){
        
        var removedNodeId = $(this).find('.node-id').attr('data'); 
                
        nodesToBeHidden += removedNodeId+',';
            
        }
        
    });
                                                       
    //let's set the new value
    $('#wp_custom_admin_interface_remove_toolbar_item').val(nodesToBeHidden);     
        
        
        
        
        
        
        
        
        
        //OPERATION NINE - LES SAVE THE TOOLBAR MENU AND PUT THE VALUE INTO THE SETTING
        var nodeObjects = {};

        //for each list item create the objects

        $('#toolbar-menu-manager li > div').each(function( index ) {

            var containerDiv = $(this);

            var nodeGroup = (containerDiv.attr('data-group') === "true");
            var nodeHref = containerDiv.find('.node-href').val();
            
            if(nodeHref == ""){
               nodeHref = false; 
            }
            
            
            var nodeId = containerDiv.find('.node-id').attr('data');
            var nodeMeta = [];
            var nodeParent = containerDiv.parent().parent().prev().find('.node-id').attr('data');
            if(nodeParent == null){
               nodeParent = false;   
            }
            
            var nodeTitle = containerDiv.find('.node-title').val();
            if(nodeTitle == ""){
               nodeTitle = false; 
            }
            
            
            var nodeObject = {group: nodeGroup, href: nodeHref, id: nodeId, meta: nodeMeta, parent: nodeParent, title: nodeTitle}
            
            //add the items to the object
            nodeObjects[nodeId] = nodeObject;
            
        });
        
//        console.log(nodeObjects);
        
        var stringifiedAndEncodedToolbarMenuObject = btoa(JSON.stringify(nodeObjects));    
        $('#wp_custom_admin_interface_primary_toolbar_menu').val(stringifiedAndEncodedToolbarMenuObject);   
        
        
        
        
        
        
        
        if(errors == false){
        
        //run ajax to clear the transients
        var data = {
            'action': 'delete_transients'
        };

        jQuery.post(ajaxurl, data, function (response) {
            //we don't need to do anything
        });
        
        
        
        
        
            tinyMCE.triggerSave();
            $(this).ajaxSubmit({
            success: function(){
                
                $('.settings-loading-message').remove();
                
                
                $('<div class="notice notice-success is-dismissible settings-saved-message"><p>The settings have been saved.</p></div>').insertAfter('.wp-custom-admin-interface-save-button');
                setTimeout(function() {
                    $('.settings-saved-message').slideUp();
                }, 3000);

            }
            }); 

        return false; 
        
        
        } 
        //remove the loading message even if things fail
        $('.settings-loading-message').remove();
        
        
        

        });

    
    
    
    
    
    
    
    
    
    
    
    // ******************************* EXCEPTION CASES ***************************//
    
    
        function createUserAndRoleSelection(selected, destination){

            var selectedOption = selected;

            var allRolesAndUsers = $('#combinedListOfUsersAndRoles').attr('data');

            var allRolesAndUsersRemoveLastComma = allRolesAndUsers.slice(0,-1);

            var allRolesAndUsersArray = allRolesAndUsersRemoveLastComma.split(',');

            var output = '<div class="exception-case"><select>';

            for (key in allRolesAndUsersArray){

                var option = allRolesAndUsersArray[key];

                if(option.indexOf('Role:') >= 0) {

                    var optionValue = option.substr(6,option.length - 6);

                    if(optionValue == selectedOption) {
                        output += '<option selected="selected" value="'+optionValue+'">'+option+'</option>';    
                    } else{
                        output += '<option value="'+optionValue+'">'+option+'</option>';    
                    }



                } else {

                    var optionFirstBracket = option.indexOf('(');
                    var optionLastBracket = option.indexOf(')');
                    var optionValue = option.substr(optionFirstBracket+1,optionLastBracket-optionFirstBracket-1);

                    var optionDisplay = option.substr(0,optionFirstBracket);

                    if(optionValue == selectedOption) {
                        output += '<option selected="selected" value="'+optionValue+'">'+optionDisplay+'</option>';
                    } else {
                        output += '<option value="'+optionValue+'">'+optionDisplay+'</option>';    
                    }

                }

            } 

            output += '</select><i class="fa fa-plus add-exception-case" aria-hidden="true"></i><i class="fa fa-minus remove-exception-case" aria-hidden="true"></i></div>';
            
            destination.find('#outputOfUsersAndRolesSelection').append(output);


        }
    
    
    
    

    
    $('.userAndRoleSelection').each(function(index) {

        var typeContainer = $(this);
        var exceptionContainer = $(this).next().next();
        
        //lets get our users and roles and turn it into a dropdown


        //execute function initially
        //get saved setting
        var savedExceptions = exceptionContainer.find('.saved_exception_cases').val();
        
        //remove last comma    
        var savedExceptionsRemoveLastComma = savedExceptions.slice(0,-1);
        //turn the comma list into an array
        var savedExceptionsArray = savedExceptionsRemoveLastComma.split(',');


        if(savedExceptions.length>0){
            //for each item in the array call the function to create a select line item and give it a preselected value of our array value
            $.each(savedExceptionsArray,function(key,value) {
                createUserAndRoleSelection(value,exceptionContainer);        
            });

        } else {
            //call the initial exception message
            addInitialException(exceptionContainer);  
        }



        
    });

    
        
    
        //function to render the add select option when no exceptions are created
        function addInitialException(destination){
            
        destination.find('#outputOfUsersAndRolesSelection').append('<div class="add-exception-case" id="add-initial-exception"><h3><i class="fa fa-plus" aria-hidden="true"></i> Add an exception case</h3></div>');     
               
        }
    
        
    
        //add exception case
        $('.wrap').on("click", ".add-exception-case", function (event) {

            //prevent the form from submitting    
            event.preventDefault(); 

            //remove initial add exception if exists
            
            var containerRow = $(this).parent().parent().parent().parent(); 
            
            $(this).parent().parent().find('#add-initial-exception').remove(); 
            
            createUserAndRoleSelection('',containerRow);
            

        });
    
    
   


        //remove exception case
        $('.wrap').on("click", ".remove-exception-case", function (event) {

            //prevent the form from submitting    
            event.preventDefault(); 

            var parentContainer = $(this).parent().parent();
            var parentParentContainer = $(this).parent().parent().parent();
            
            var countOfExceptionCases = parentContainer.find('.exception-case').length; 
            
            if(countOfExceptionCases == 1) {
                $(this).parent().remove();
                addInitialException(parentParentContainer);
            } else {
                $(this).parent().remove();    
            }

        });
    
    
    
    
    
    
    
    
    
    
    
    
    // ******************************* HIDE PLUGINS PAGE ***************************//
    
    
    //code to add and remove items from input when clicking the hide icon

    $('.wrap').on("click", ".remove-plugin-item", function () {

        var hiddenPlugins = $('#wp_custom_admin_interface_hide_these_plugins').val();

        if (hiddenPlugins != null) {
            var hiddenPluginsArray = hiddenPlugins.split(',');
        }
        
        var pluginPath = $(this).parent().find('#plugin-name').attr('data');
        
        
        if ($.inArray(pluginPath, hiddenPluginsArray) != -1) {
            //it is in array i.e. we need to remove it  
            $(this).parent().parent().removeClass("hidden-plugin-item");    
            $(this).removeClass("fa-eye");
            $(this).addClass("fa-eye-slash");
            
            hiddenPluginsArray.splice($.inArray(pluginPath, hiddenPluginsArray), 1);
            $('#wp_custom_admin_interface_hide_these_plugins').val(hiddenPluginsArray.join());
            
        } else {
            //its not in the array i.e. we need to add it
            $(this).parent().parent().addClass("hidden-plugin-item");
            $(this).addClass("fa-eye");
            $(this).removeClass("fa-eye-slash"); 
            
            hiddenPluginsArray.push(pluginPath);
            $('#wp_custom_admin_interface_hide_these_plugins').val(hiddenPluginsArray.join());

        }

    });
    
    //code to assign the appropriate classes initially
    
    function assignInitialHidePluginClasses(){
        
        $('.plugin-item').each(function(index) {
            
            var pluginPath = $(this).find('#plugin-name').attr('data');
            var hiddenPlugins = $('#wp_custom_admin_interface_hide_these_plugins').val();

            if (hiddenPlugins != null) {
                var hiddenPluginsArray = hiddenPlugins.split(',');
            }
            
            
            if ($.inArray(pluginPath, hiddenPluginsArray) != -1) {
                $(this).addClass("hidden-plugin-item");
                $(this).find('.remove-plugin-item').addClass("fa-eye");
                $(this).find('.remove-plugin-item').removeClass("fa-eye-slash");   
            }
            
        });
        
        
    }
    //lets run this function initially
    assignInitialHidePluginClasses();
    
 
    

    

    
    
    
    
    
    
    
    
    
    
    
    // ******************************* HIDE USERS PAGE ***************************//
    
    
    //code to add and remove items from input when clicking the hide icon

    $('.wrap').on("click", ".remove-user-item", function () {

        var hiddenUsers = $('#wp_custom_admin_interface_hide_these_users').val();

        if (hiddenUsers != null) {
            var hiddenUsersArray = hiddenUsers.split(',');
        }
        
        var userPath = $(this).parent().find('#user-name').attr('data');
        
        
        if ($.inArray(userPath, hiddenUsersArray) != -1) {
            //it is in array i.e. we need to remove it  
            $(this).parent().parent().removeClass("hidden-user-item");    
            $(this).removeClass("fa-eye");
            $(this).addClass("fa-eye-slash");
            
            hiddenUsersArray.splice($.inArray(userPath, hiddenUsersArray), 1);
            $('#wp_custom_admin_interface_hide_these_users').val(hiddenUsersArray.join());
            
        } else {
            //its not in the array i.e. we need to add it
            $(this).parent().parent().addClass("hidden-user-item");
            $(this).addClass("fa-eye");
            $(this).removeClass("fa-eye-slash"); 
            
            hiddenUsersArray.push(userPath);
            $('#wp_custom_admin_interface_hide_these_users').val(hiddenUsersArray.join());

        }

    });
    
    //code to assign the appropriate classes initially
    
    function assignInitialHideUserClasses(){
        
        $('.user-item').each(function(index) {
            
            var userPath = $(this).find('#user-name').attr('data');
            var hiddenUsers = $('#wp_custom_admin_interface_hide_these_users').val();

            if (hiddenUsers != null) {
                var hiddenUsersArray = hiddenUsers.split(',');
            }
            
            
            if ($.inArray(userPath, hiddenUsersArray) != -1) {
                $(this).addClass("hidden-user-item");
                $(this).find('.remove-user-item').addClass("fa-eye");
                $(this).find('.remove-user-item').removeClass("fa-eye-slash");   
            }
            
        });
        
        
    }
    //lets run this function initially
    assignInitialHideUserClasses();
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    // ******************************* HIDE SIDEBARS PAGE ***************************//
    
    
    //code to add and remove items from input when clicking the hide icon

    $('.wrap').on("click", ".remove-sidebar-item", function () {

        var hiddenSidebars = $('#wp_custom_admin_interface_hide_these_sidebars').val();

        if (hiddenSidebars != null) {
            var hiddenSidebarsArray = hiddenSidebars.split(',');
        }
        
        var sidebarPath = $(this).parent().find('#sidebar-name').attr('data');
        
        
        if ($.inArray(sidebarPath, hiddenSidebarsArray) != -1) {
            //it is in array i.e. we need to remove it  
            $(this).parent().parent().removeClass("hidden-sidebar-item");    
            $(this).removeClass("fa-eye");
            $(this).addClass("fa-eye-slash");
            
            hiddenSidebarsArray.splice($.inArray(sidebarPath, hiddenSidebarsArray), 1);
            $('#wp_custom_admin_interface_hide_these_sidebars').val(hiddenSidebarsArray.join());
            
        } else {
            //its not in the array i.e. we need to add it
            $(this).parent().parent().addClass("hidden-sidebar-item");
            $(this).addClass("fa-eye");
            $(this).removeClass("fa-eye-slash"); 
            
            hiddenSidebarsArray.push(sidebarPath);
            $('#wp_custom_admin_interface_hide_these_sidebars').val(hiddenSidebarsArray.join());

        }

    });
    
    //code to assign the appropriate classes initially
    
    function assignInitialHideSidebarClasses(){
        
        $('.sidebar-item').each(function(index) {
            
            var sidebarPath = $(this).find('#sidebar-name').attr('data');
            var hiddenSidebars = $('#wp_custom_admin_interface_hide_these_sidebars').val();

            if (hiddenSidebars != null) {
                var hiddenSidebarsArray = hiddenSidebars.split(',');
            }
            
            
            if ($.inArray(sidebarPath, hiddenSidebarsArray) != -1) {
                $(this).addClass("hidden-sidebar-item");
                $(this).find('.remove-sidebar-item').addClass("fa-eye");
                $(this).find('.remove-sidebar-item').removeClass("fa-eye-slash");   
            }
            
        });
        
        
    }
    //lets run this function initially
    assignInitialHideSidebarClasses();
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    // ******************************* CUSTOMISE TOOLBAR MENU PAGE ***************************//
    

    
    //function to render the admin menu manager taking the menu and submenu parameters given to it to build out the menu
    function renderToolbarMenuManager (menu) {
        
        //lets remove all items inside existing div (if they should exist), this is used when restoring the menu from the last save or loading the default WordPress menu
        $('#toolbar-menu-manager').empty();
        
        //get the inputs and decode the base64 and put it into JSON format so we can play with it later

        var toolbarMenuSettingDecodedAndParsed = JSON.parse(atob(menu));
        
        console.log(toolbarMenuSettingDecodedAndParsed);
        
        var listArray = [];
        
        do {
            
            processNodes(toolbarMenuSettingDecodedAndParsed);
            
        var countOfNodesInData = 0;
        var countOfItemsInArray = 0;
        

        for(node in toolbarMenuSettingDecodedAndParsed){
            
            countOfNodesInData++; 
            
            var nodeId = toolbarMenuSettingDecodedAndParsed[node]['id'];

            if($.inArray(nodeId,listArray) >= 0){

                countOfItemsInArray++;    

            }
            
        }
              
        } while (countOfNodesInData !== countOfItemsInArray);
        
        
        
        
        
        var listOutput = listArray.join('');

        $('#toolbar-menu-manager').append(listOutput);

        function processNodes(data){

                    
            for(node in data){
                //declare standard variables
                var nodeId = data[node]['id'];
                var nodeTitleOriginal = data[node]['title'];
                var nodeTitle = (""+nodeTitleOriginal).replace(/\'/g, "\"");
                var noteTitleString = nodeTitle;
                if(nodeTitle.indexOf('<') !== -1){
                    //it contains HTML elements so we need to strip the elements    
                    var nodeTitle = $("<div/>").html(nodeTitle).text()+'<title-not-editable>';   
                }   
                
                var nodeParent = data[node]['parent'];
                var nodeHref = data[node]['href'];
                var nodeGroup = data[node]['group'];
                var nodeMeta = data[node]['meta'];
                
                
                var titleInput = '<input style="font-weight:bold;" title="'+nodeId+'" readonly="readonly" type="text" class="node-title" value=\''+nodeTitle+'\'>';
                
                if(noteTitleString.indexOf('<') !== -1){} else { 
                    titleInput += '<i class="fa fa-pencil-square-o edit-node-title" title="Edit menu title" aria-hidden="true"></i>';  
                }
                
                var hrefInput = '<input style="margin-left: 20px;" readonly="readonly" type="text" class="node-href" value="'+nodeHref+'"><i class="fa fa-link edit-node-link" title="Edit menu link" aria-hidden="true" style="display: inline-block;"></i>';
                var removeItem = '<i class="fa fa-eye-slash remove-node-item" title="Hide menu item" aria-hidden="true"></i>';
                
                
                
                //check if the item isn't already in the array
                if(listArray.indexOf(nodeId) == -1) {
                    //check if item is a parent and if so add the item to the array
                    if(nodeParent == false) {
                        listArray.push('<li><div data-group="'+nodeGroup+'"><span data="'+nodeId+'" class="node-id" style="display:none;">');
                        listArray.push(nodeId);
                        listArray.push('</span>'+titleInput+hrefInput+removeItem+'</div>');
                        listArray.push('</li>');
                    } else {
                        //item isnt a parent
                        //check if the items parent is in the array and if so add it to the array
                        if(listArray.indexOf(nodeParent) != -1){
                                                        
                            var positionInArray = listArray.indexOf(nodeParent);
                            //we need to find the position of the closing ul for when appending list items to existing uls
                            var positionOfClosingUl = listArray.indexOf('</ul>',positionInArray);

                            //we need to check if the parent item already has a ul container i.e. it already has a child list item
                            if(listArray[positionInArray+2]=='<ul>'){
                                //item already has a ul container
                                listArray.splice(positionOfClosingUl+0,0,'<li><div data-group="'+nodeGroup+'"><span class="node-id" data="'+nodeId+'" style="display:none;">');
                                listArray.splice(positionOfClosingUl+1,0,nodeId);
                                listArray.splice(positionOfClosingUl+2,0,'</span>'+titleInput+hrefInput+removeItem+'</div>');
                                listArray.splice(positionOfClosingUl+3,0,'</li>');
                            } else {
                                //item doesn't have a ul container so lets create it 
                                listArray.splice(positionInArray+2,0,'<ul>');
                                listArray.splice(positionInArray+3,0,'<li><div data-group="'+nodeGroup+'"><span class="node-id" data="'+nodeId+'" style="display:none;">');
                                listArray.splice(positionInArray+4,0,nodeId);
                                listArray.splice(positionInArray+5,0,'</span>'+titleInput+hrefInput+removeItem+'</div>');
                                listArray.splice(positionInArray+6,0,'</li>');
                                listArray.splice(positionInArray+7,0,'</ul>');
                            }

                        } 

                    }
                
                }
                
            }
             
        }
    
    }
    
    //render the menu on load using the current saved settings
    renderToolbarMenuManager($('#wp_custom_admin_interface_primary_toolbar_menu').val()); 
    
    
    //add sortable functionality
    $('#toolbar-menu-manager').nestedSortable({
			handle: 'div',
			items: 'li',
			toleranceElement: '> div',
            listType: 'ul',
            isTree: true
	});
    
    
    //make input field editable
    $('.wrap').on("click", ".edit-node-title", function () {
    
        var currentStateReadOnly = $(this).prev().prop('readonly');
        
        if(currentStateReadOnly == true) {
            $(this).prev().prop('readonly',false);
            $(this).removeClass("fa-pencil-square-o");
            $(this).addClass("fa-check");
            
        } else {
            $(this).prev().prop('readonly',true);
            $(this).addClass("fa-pencil-square-o");
            $(this).removeClass("fa-check");
        }
    });
    
    
    //make input field url editable
    $('.wrap').on("click", ".edit-node-link", function () {
    
        var currentStateReadOnly = $(this).prev().prop('readonly');
        
        if(currentStateReadOnly == true) {
            $(this).prev().prop('readonly',false);
            $(this).removeClass("fa-link");
            $(this).addClass("fa-check");
            
        } else {
            $(this).prev().prop('readonly',true);
            $(this).addClass("fa-link");
            $(this).removeClass("fa-check");
        }
    });
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    //code to add and remove items from input when clicking the hide icon

    $('.wrap').on("click", ".remove-node-item", function () {
        
        //get the name of the menu item
        var menuItemContainer = $(this).parent();
        
        if($(menuItemContainer).hasClass('removed-node-item')){
            $(menuItemContainer).removeClass("removed-node-item");    
            $(this).removeClass("fa-eye");
            $(this).addClass("fa-eye-slash");
        } else {
            $(menuItemContainer).addClass("removed-node-item");
            $(this).addClass("fa-eye");
            $(this).removeClass("fa-eye-slash");       
        }
        
    });
    
    
    //on load assign appropriate classes
    //for each menu item check if in array, and if in array add class
    function assignNodesAppropriateClasses() {
        
        var removeNodeItems = $('#wp_custom_admin_interface_remove_toolbar_item').val();

        if (removeNodeItems != null) {
            var removeMenuNodesArray = removeNodeItems.split(',');
        }
        
        $('#toolbar-menu-manager li > div').each(function( index ) {
            
            var menuNodeContainer = $(this);
            var menuNodeName = $(this).find('.node-id').attr('data'); 
            var menuNodeIcon = $(this).parent().find('.remove-node-item');
            

                if ($.inArray(menuNodeName, removeMenuNodesArray) != -1) {
                    $(menuNodeContainer).addClass("removed-node-item");
                    $(menuNodeIcon).addClass("fa-eye");
                    $(menuNodeIcon).removeClass("fa-eye-slash");
                } else {
                    $(menuNodeContainer).removeClass("removed-node-item");
                    $(menuNodeIcon).removeClass("fa-eye");
                    $(menuNodeIcon).addClass("fa-eye-slash");      
                } 

        });
    }
    //execute function on load
    assignNodesAppropriateClasses();
    
    
    
    
    //add node item
    $('#poststuff').on("click", "#add-node-item", function (event) {
        event.preventDefault(); 
        
        function newNodeIdGenerator(){
            
            var prefix = 'unique-node-';
            var prefixLength = prefix.length;
            
            
            var existingNodes = [];
            
            $('#toolbar-menu-manager .node-id').each(function( index ) {
                
                var nodeId = $(this).attr('data');
                var nodeIdLength = nodeId.length;
                
                
                if(nodeId.indexOf(prefix) !== -1) {
                    var numberComponentOfNodeId = nodeId.substr(prefixLength, nodeIdLength-prefixLength);
                    
                    existingNodes.push(parseInt(numberComponentOfNodeId)); 
                }
                
            });
            
            
            if(existingNodes.length == 0){
                var largestNumber = 1;    
            } else {
                
                var largestNumber = existingNodes[0];
                
                for (var i = 0; i < existingNodes.length; i++) {
                    if (largestNumber < existingNodes[i] ) {
                        largestNumber = existingNodes[i];
                    }
                }
                
                largestNumber++;
  
            }
   
            return prefix+largestNumber;    
        }
        
        var uniqueNodeId = newNodeIdGenerator();
        
        
        $('#toolbar-menu-manager').prepend('<li class="mjs-nestedSortable-branch mjs-nestedSortable-expanded"><div data-group="false" class="ui-sortable-handle"><span class="node-id" data="'+uniqueNodeId+'" style="display:none;">'+uniqueNodeId+'</span><input style="font-weight:bold;" title="" readonly="readonly" type="text" class="node-title" value=""><i class="fa fa-pencil-square-o edit-node-title" title="Edit menu title" aria-hidden="true"></i><input style="margin-left: 20px;" readonly="readonly" type="text" class="node-href" value=""><i class="fa fa-link edit-node-link" title="Edit menu link" aria-hidden="true" style="display: inline-block;"></i><i class="fa fa-eye-slash remove-node-item" title="Hide menu item" aria-hidden="true"></i><i class="fa fa-trash-o delete-node-item delete-custom-node-item" title="Remove menu item" aria-hidden="true"></i></div></li>'); 
    
    });
    
    
    //remove a node item
    $('.wrap').on("click", ".delete-node-item", function () {
        
        var confirmation = confirm('Are you sure you want to delete this menu item?');    
    
        if(confirmation == true) {  
            
            $(this).parent().parent().remove(); 

        }
    });
    
    
    //add trash icon on load
    //add delete menu item icon to custom icons
    function addTrashIconToCustomMenuNodes(){
     
        var targetElements = $('#toolbar-menu-manager .node-id');

        for (var i = 0; i < targetElements.length; ++i) {

            var currentItem = targetElements[i];
            var currentItemParent = $(currentItem).parent();

            var nodeIdValue = $(currentItem).attr('data');

            if(nodeIdValue.indexOf('unique-node-') !== -1){
                $(currentItemParent).append('<i class="fa fa-trash-o delete-node-item delete-custom-node-item" title="Remove menu item" aria-hidden="true"></i>');
            }
        }    
    }
    //execute on load
    addTrashIconToCustomMenuNodes();
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    //restore menu to WordPress default toolbar
    $('#restore-default-toolbar').click(function (event) {
    event.preventDefault();  
    
    var confirmation = confirm('Are you sure you want to restore the toolbar menu to the default WordPress toolbar? This will delete any customisations made to the menu.');    
    
        if(confirmation == true) {    

            //get variables from button        
            var menu = $('#restore-default-toolbar').attr('toolbardata');
                    
            //lets set the setting input with the default WordPress values
            $('#wp_custom_admin_interface_primary_toolbar_menu').val(menu);
            $('#wp_custom_admin_interface_remove_toolbar_item').val('');


            //now lets render the admin menu manager with the original values
            renderToolbarMenuManager(menu);
            
            //re-assign labels appropriate classes
            assignNodesAppropriateClasses();
            

            //lets render a success message
            $('<div class="notice notice-info is-dismissible restore-menu-message"><p>The toolbar has been successfully restored to the default WordPress toolbar. Please press "Save All Settings" to save the changes.</p></div>').insertAfter('#admin-toolbar-manager-buttons');
            
            setTimeout(function() {
                $('.restore-menu-message').slideUp();
            }, 5500);
            
        } 
    });
    
    //restore menu to last save
    $('#restore-last-save-toolbar').click(function (event) {
    event.preventDefault();  
    
    var confirmation = confirm('Are you sure you want to restore the toolbar menu to the last save you did? This will delete any edits you have just done.');    
    
        if(confirmation == true) {    

            //get variables from button        
            var menu = $('#restore-last-save-toolbar').attr('toolbardata');
            var removedItems = $('#restore-last-save-toolbar').attr('removeditems');

            //lets set the setting input with the default WordPress values
            $('#wp_custom_admin_interface_primary_toolbar_menu').val(menu);
            $('#wp_custom_admin_interface_remove_toolbar_item').val(removedItems);


            //now lets render the admin menu manager with the original values
            renderToolbarMenuManager(menu);
            
            //re-assign labels appropriate classes
            assignNodesAppropriateClasses();

            //lets render a success message
            $('<div class="notice notice-info is-dismissible restore-menu-message"><p>The toolbar has been successfully restored to the previous save. Please press "Save All Settings" to save the changes.</p></div>').insertAfter('#admin-toolbar-manager-buttons');
            
            setTimeout(function() {
                $('.restore-menu-message').slideUp();
            }, 5500);
            
        } 
    });  
    
    
    
    
    
    
    
 
    
});