<?php
if ( ! defined( 'ABSPATH' ) ) exit; // Exit if accessed directly 

//define all the settings in the plugin
function wp_custom_admin_interface_settings_init(  ) { 
    
    //start general
	register_setting( 'generalPage', 'wp_custom_admin_interface_settings' );
    
    add_settings_section(
		'wp_custom_admin_interface_general','', 
		'wp_custom_admin_interface_settings_general_callback', 
		'generalPage'
	);

	add_settings_field( 
		'wp_custom_admin_interface_background_color','', 
		'wp_custom_admin_interface_background_color_render', 
		'generalPage', 
		'wp_custom_admin_interface_general' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_custom_logo','', 
		'wp_custom_admin_interface_custom_logo_render', 
		'generalPage', 
		'wp_custom_admin_interface_general' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_custom_favicon','', 
		'wp_custom_admin_interface_custom_favicon_render', 
		'generalPage', 
		'wp_custom_admin_interface_general' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_custom_favicon_frontend','', 
		'wp_custom_admin_interface_custom_favicon_frontend_render', 
		'generalPage', 
		'wp_custom_admin_interface_general' 
	);
    
    
    
    add_settings_field( 
		'wp_custom_admin_interface_custom_footer','', 
		'wp_custom_admin_interface_custom_footer_render', 
		'generalPage', 
		'wp_custom_admin_interface_general' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_remove_footer','', 
		'wp_custom_admin_interface_remove_footer_render', 
		'generalPage', 
		'wp_custom_admin_interface_general' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_remove_toolbar_frontend','', 
		'wp_custom_admin_interface_remove_toolbar_frontend_render', 
		'generalPage', 
		'wp_custom_admin_interface_general' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_disable_update','', 
		'wp_custom_admin_interface_disable_update_render', 
		'generalPage', 
		'wp_custom_admin_interface_general' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_tab_memory','', 
		'wp_custom_admin_interface_tab_memory_render', 
		'generalPage', 
		'wp_custom_admin_interface_general' 
	);
    
    
    //start custom css
    register_setting( 'customCodePage', 'wp_custom_admin_interface_settings' );
    
    add_settings_section(
		'wp_custom_admin_interface_custom_code','', 
		'wp_custom_admin_interface_settings_custom_code_callback', 
		'customCodePage'
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_custom_css_code','', 
		'wp_custom_admin_interface_custom_css_code_render', 
		'customCodePage', 
		'wp_custom_admin_interface_custom_code' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_custom_login_css_code','', 
		'wp_custom_admin_interface_custom_login_css_code_render', 
		'customCodePage', 
		'wp_custom_admin_interface_custom_code' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_custom_javascript_code','', 
		'wp_custom_admin_interface_custom_javascript_code_render', 
		'customCodePage', 
		'wp_custom_admin_interface_custom_code' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_custom_php_code','', 
		'wp_custom_admin_interface_custom_php_code_render', 
		'customCodePage', 
		'wp_custom_admin_interface_custom_code' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_deactivate_code','', 
		'wp_custom_admin_interface_deactivate_code_render', 
		'customCodePage', 
		'wp_custom_admin_interface_custom_code' 
	);
    
    
    
    //start maintenance
    
    register_setting( 'maintenancePage', 'wp_custom_admin_interface_settings' );
    
    add_settings_section(
		'wp_custom_admin_interface_maintenance','', 
		'wp_custom_admin_interface_maintenance_callback', 
		'maintenancePage'
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_enable_maintenance','', 
		'wp_custom_admin_interface_enable_maintenance_render', 
		'maintenancePage', 
		'wp_custom_admin_interface_maintenance' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_maintenance_text','', 
		'wp_custom_admin_interface_maintenance_text_render', 
		'maintenancePage', 
		'wp_custom_admin_interface_maintenance' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_maintenance_end','', 
		'wp_custom_admin_interface_maintenance_end_render', 
		'maintenancePage', 
		'wp_custom_admin_interface_maintenance' 
	);
    
    //start widget page
    
    register_setting( 'widgetPage', 'wp_custom_admin_interface_settings' );
    
    add_settings_section(
		'wp_custom_admin_interface_widget','', 
		'wp_custom_admin_interface_widget_callback', 
		'widgetPage'
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_enable_custom_widget','', 
		'wp_custom_admin_interface_enable_custom_widget_render', 
		'widgetPage', 
		'wp_custom_admin_interface_widget' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_custom_widget_title','', 
		'wp_custom_admin_interface_custom_widget_title_render', 
		'widgetPage', 
		'wp_custom_admin_interface_widget' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_custom_widget_content','', 
		'wp_custom_admin_interface_custom_widget_content_render', 
		'widgetPage', 
		'wp_custom_admin_interface_widget' 
	);
    
    
    
    //start custom color scheme
    
    register_setting( 'adminColorSchemePage', 'wp_custom_admin_interface_settings' );
    
    add_settings_section(
		'wp_custom_admin_interface_admin_color_scheme','', 
		'wp_custom_admin_interface_admin_color_scheme_callback', 
		'adminColorSchemePage'
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_color_scheme_color_one','', 
		'wp_custom_admin_interface_color_scheme_color_one_render', 
		'adminColorSchemePage', 
		'wp_custom_admin_interface_admin_color_scheme' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_color_scheme_color_two','', 
		'wp_custom_admin_interface_color_scheme_color_two_render', 
		'adminColorSchemePage', 
		'wp_custom_admin_interface_admin_color_scheme' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_color_scheme_color_three','', 
		'wp_custom_admin_interface_color_scheme_color_three_render', 
		'adminColorSchemePage', 
		'wp_custom_admin_interface_admin_color_scheme' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_color_scheme_color_four','', 
		'wp_custom_admin_interface_color_scheme_color_four_render', 
		'adminColorSchemePage', 
		'wp_custom_admin_interface_admin_color_scheme' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_color_scheme_icon_color','', 
		'wp_custom_admin_interface_color_scheme_icon_color_render', 
		'adminColorSchemePage', 
		'wp_custom_admin_interface_admin_color_scheme' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_force_color_scheme','', 
		'wp_custom_admin_interface_force_color_scheme_render', 
		'adminColorSchemePage', 
		'wp_custom_admin_interface_admin_color_scheme' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_button_link_color','', 
		'wp_custom_admin_interface_button_link_color_render', 
		'adminColorSchemePage', 
		'wp_custom_admin_interface_admin_color_scheme' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_button_link_hover_color','', 
		'wp_custom_admin_interface_button_link_color_hover_render', 
		'adminColorSchemePage', 
		'wp_custom_admin_interface_admin_color_scheme' 
	);
    
    
    //start menu options
    register_setting( 'menuPage', 'wp_custom_admin_interface_settings' );
    
    add_settings_section(
		'wp_custom_admin_interface_admin_menu','', 
		'wp_custom_admin_interface_admin_menu_callback', 
		'menuPage'
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_top_level_menu','', 
		'wp_custom_admin_interface_top_level_menu_render', 
		'menuPage', 
		'wp_custom_admin_interface_admin_menu' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_sub_level_menu','', 
		'wp_custom_admin_interface_sub_level_menu_render', 
		'menuPage', 
		'wp_custom_admin_interface_admin_menu' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_remove_menu_item','', 
		'wp_custom_admin_interface_remove_menu_item_render', 
		'menuPage', 
		'wp_custom_admin_interface_admin_menu' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_exception_type','', 
		'wp_custom_admin_interface_exception_type_render', 
		'menuPage', 
		'wp_custom_admin_interface_admin_menu' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_exception_cases','', 
		'wp_custom_admin_interface_exception_cases_render', 
		'menuPage', 
		'wp_custom_admin_interface_admin_menu' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_show_notifications','', 
		'wp_custom_admin_interface_show_notifications_render', 
		'menuPage', 
		'wp_custom_admin_interface_admin_menu' 
	);
    
    
    //start hide plugin options
    register_setting( 'hidePluginsPage', 'wp_custom_admin_interface_settings' );
    
    add_settings_section(
		'wp_custom_admin_interface_hide_plugins','', 
		'wp_custom_admin_interface_hide_plugins_callback', 
		'hidePluginsPage'
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_hide_these_plugins','', 
		'wp_custom_admin_interface_hide_these_plugins_render', 
		'hidePluginsPage', 
		'wp_custom_admin_interface_hide_plugins' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_exception_type_plugin','', 
		'wp_custom_admin_interface_exception_type_plugin_render', 
		'hidePluginsPage', 
		'wp_custom_admin_interface_hide_plugins' 
	);

    
    add_settings_field( 
		'wp_custom_admin_interface_exception_cases_plugin','', 
		'wp_custom_admin_interface_exception_cases_plugin_render', 
		'hidePluginsPage', 
		'wp_custom_admin_interface_hide_plugins' 
	);
    
    
    //start hide users options
    register_setting( 'hideUsersPage', 'wp_custom_admin_interface_settings' );
    
    add_settings_section(
		'wp_custom_admin_interface_hide_users','', 
		'wp_custom_admin_interface_hide_users_callback', 
		'hideUsersPage'
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_hide_these_users','', 
		'wp_custom_admin_interface_hide_these_users_render', 
		'hideUsersPage', 
		'wp_custom_admin_interface_hide_users' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_exception_type_user','', 
		'wp_custom_admin_interface_exception_type_user_render', 
		'hideUsersPage', 
		'wp_custom_admin_interface_hide_users' 
	);

    
    add_settings_field( 
		'wp_custom_admin_interface_exception_cases_user','', 
		'wp_custom_admin_interface_exception_cases_user_render', 
		'hideUsersPage', 
		'wp_custom_admin_interface_hide_users' 
	);

    
    
    //start hide sidebars options
    register_setting( 'hideSidebarsPage', 'wp_custom_admin_interface_settings' );
    
    add_settings_section(
		'wp_custom_admin_interface_hide_sidebars','', 
		'wp_custom_admin_interface_hide_sidebars_callback', 
		'hideSidebarsPage'
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_hide_these_sidebars','', 
		'wp_custom_admin_interface_hide_these_sidebars_render', 
		'hideSidebarsPage', 
		'wp_custom_admin_interface_hide_sidebars' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_exception_type_sidebar','', 
		'wp_custom_admin_interface_exception_type_sidebar_render', 
		'hideSidebarsPage', 
		'wp_custom_admin_interface_hide_sidebars' 
	);

    
    add_settings_field( 
		'wp_custom_admin_interface_exception_cases_sidebar','', 
		'wp_custom_admin_interface_exception_cases_sidebar_render', 
		'hideSidebarsPage', 
		'wp_custom_admin_interface_hide_sidebars' 
	);    
    

    //start toolbar options
    register_setting( 'toolbarPage', 'wp_custom_admin_interface_settings' );
    
    add_settings_section(
		'wp_custom_admin_interface_toolbar_menu','', 
		'wp_custom_admin_interface_toolbar_menu_callback', 
		'toolbarPage'
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_primary_toolbar_menu','', 
		'wp_custom_admin_interface_primary_toolbar_menu_render', 
		'toolbarPage', 
		'wp_custom_admin_interface_toolbar_menu' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_remove_toolbar_item','', 
		'wp_custom_admin_interface_remove_toolbar_item_render', 
		'toolbarPage', 
		'wp_custom_admin_interface_toolbar_menu' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_exception_type_toolbar','', 
		'wp_custom_admin_interface_exception_type_toolbar_render', 
		'toolbarPage', 
		'wp_custom_admin_interface_toolbar_menu' 
	);
    
    add_settings_field( 
		'wp_custom_admin_interface_exception_cases_toolbar','', 
		'wp_custom_admin_interface_exception_cases_toolbar_render', 
		'toolbarPage', 
		'wp_custom_admin_interface_toolbar_menu' 
	);
    
    

}

/**
* 
*
*
* The following functions output the callback of the sections
*/
function wp_custom_admin_interface_settings_general_callback(){}
function wp_custom_admin_interface_settings_custom_code_callback(){}
function wp_custom_admin_interface_maintenance_callback(){}
function wp_custom_admin_interface_widget_callback(){}
function wp_custom_admin_interface_admin_color_scheme_callback(){}
function wp_custom_admin_interface_admin_menu_callback(){}
function wp_custom_admin_interface_toolbar_menu_callback(){}
function wp_custom_admin_interface_hide_plugins_callback(){}
function wp_custom_admin_interface_hide_users_callback(){}
function wp_custom_admin_interface_hide_sidebars_callback(){}


//the following functions output the option html
function wp_custom_admin_interface_background_color_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
	?>
    <tr valign="top">
        <td scope="row">
            <label for="wp_custom_admin_interface_background_color"><?php _e('Login Screen Background Color', 'wp-custom-admin-interface' ); ?></label>
        </td>
        <td>
            
            <input name="wp_custom_admin_interface_settings[wp_custom_admin_interface_background_color]" id="wp_custom_admin_interface_background_color" type="text" value="<?php if(isset($options['wp_custom_admin_interface_background_color'])) { echo esc_attr($options['wp_custom_admin_interface_background_color']); } ?>" class="my-color-field" data-default-color="#f1f1f1" />

        </td>
    </tr>
	<?php
}




function wp_custom_admin_interface_custom_logo_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
	?>
    <tr valign="top">
        <td scope="row">
            <label for="wp_custom_admin_interface_custom_logo"><?php _e('Custom Login Logo', 'wp-custom-admin-interface' ); ?></label>
        </td>
        <td>
            
        <input class="wp_custom_admin_interface_settings_input" type="text" name="wp_custom_admin_interface_settings[wp_custom_admin_interface_custom_logo]" id="wp_custom_admin_interface_custom_logo" class="regular-text" value="<?php if(isset($options['wp_custom_admin_interface_custom_logo'])) { echo esc_attr($options['wp_custom_admin_interface_custom_logo']); } ?>">
            
            
        <input type="button" name="upload-btn" id="upload-btn" class="button-secondary wp_custom_admin_interface_media_upload_button" value="<?php _e('Upload Image', 'wp-custom-admin-interface' ); ?>">

        </td>
    </tr>
	<?php
}


function wp_custom_admin_interface_custom_favicon_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
	?>
    <tr valign="top">
        <td scope="row">
            <label for="wp_custom_admin_interface_custom_favicon"><?php _e('Custom Favicon', 'wp-custom-admin-interface' ); ?></label> <i class="fa fa-info-circle information-icon" aria-hidden="true"></i>
            <p class="hidden"><em><?php _e('For best results please upload an image with a square aspect ratio', 'wp-custom-admin-interface' ); ?></em></p>
        </td>
        <td>
            
        <input class="wp_custom_admin_interface_settings_input" type="text" name="wp_custom_admin_interface_settings[wp_custom_admin_interface_custom_favicon]" id="wp_custom_admin_interface_custom_favicon" class="regular-text" value="<?php if(isset($options['wp_custom_admin_interface_custom_favicon'])) { echo esc_attr($options['wp_custom_admin_interface_custom_favicon']); } ?>">
            
            
        <input type="button" name="upload-btn" id="upload-btn" class="button-secondary wp_custom_admin_interface_media_upload_button" value="<?php _e('Upload Image', 'wp-custom-admin-interface' ); ?>">

        </td>
    </tr>
	<?php
}


function wp_custom_admin_interface_custom_favicon_frontend_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
	?>
    <tr valign="top">
        <td scope="row">
            <label for="wp_custom_admin_interface_custom_favicon_frontend"><?php _e('Also add the above favicon to the frontend', 'wp-custom-admin-interface' ); ?></label>
        </td>
        <td>
            
            <input class="wp_custom_admin_interface_settings_checkbox" type='checkbox' id="wp_custom_admin_interface_custom_favicon_frontend" name='wp_custom_admin_interface_settings[wp_custom_admin_interface_custom_favicon_frontend]' <?php checked( isset($options['wp_custom_admin_interface_custom_favicon_frontend']), 1 ); ?> value='1'>
            
        </td>
    </tr>
	<?php
}



function wp_custom_admin_interface_button_link_color_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
	?>

    <tr valign="top" style="border-top: 2px dashed #d6d4d4;">
        <td scope="row">
        </td>
        <td>
        </td>
    </tr>

    <tr valign="top">
        <td scope="row">
            <label for="wp_custom_admin_interface_button_link_color"><?php _e('Admin Link and Button Color', 'wp-custom-admin-interface' ); ?></label> <i class="fa fa-info-circle information-icon" aria-hidden="true"></i>
            <p class="hidden"><em><?php _e('Please click the "Default" button when changing the colour to load the default WordPress styling', 'wp-custom-admin-interface' ); ?></em></p>
        </td>
        <td>
            
            <input name="wp_custom_admin_interface_settings[wp_custom_admin_interface_button_link_color]" id="wp_custom_admin_interface_button_link_color" type="text" value="<?php if(isset($options['wp_custom_admin_interface_button_link_color'])) { echo esc_attr($options['wp_custom_admin_interface_button_link_color']); } ?>" class="my-color-field" data-default-color="#0085ba" />

        </td>
    </tr>
	<?php
}


function wp_custom_admin_interface_button_link_color_hover_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
	?>
    <tr valign="top">
        <td scope="row">
            <label for="wp_custom_admin_interface_button_link_hover_color"><?php _e('Admin Link and Button Hover Color', 'wp-custom-admin-interface' ); ?></label> <i class="fa fa-info-circle information-icon" aria-hidden="true"></i>
            <p class="hidden"><em><?php _e('Please click the "Default" button when changing the colour to load the default WordPress styling', 'wp-custom-admin-interface' ); ?></em></p>
        </td>
        <td>
            
            <input name="wp_custom_admin_interface_settings[wp_custom_admin_interface_button_link_hover_color]" id="wp_custom_admin_interface_button_link_hover_color" type="text" value="<?php if(isset($options['wp_custom_admin_interface_button_link_hover_color'])) { echo esc_attr($options['wp_custom_admin_interface_button_link_hover_color']); } ?>" class="my-color-field" data-default-color="#008ec2" />

        </td>
    </tr>
	<?php
}













function wp_custom_admin_interface_custom_footer_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
	?>
    <tr valign="top">
        <td scope="row">
            <label for="wp_custom_admin_interface_custom_footer"><?php _e('Custom Footer Text', 'wp-custom-admin-interface' ); ?></label> <i class="fa fa-info-circle information-icon" aria-hidden="true"></i>
            <p class="hidden"><em><?php _e('Please feel free to use shortcodes to add dynamic content.', 'wp-custom-admin-interface' ); ?></em></p>

            
        </td>
        <td>
            
            <?php 
            
            wp_custom_admin_interface_shortcode_output('footer_text');
    
            if(isset($options['wp_custom_admin_interface_custom_footer'])){    
                wp_editor(html_entity_decode(stripslashes($options['wp_custom_admin_interface_custom_footer'])), "wp_custom_admin_interface_custom_footer", $settings = array(
                'wpautop' => false,    
                'textarea_name' => "wp_custom_admin_interface_settings[wp_custom_admin_interface_custom_footer]",
                'drag_drop_upload' => true,
                'textarea_rows' => 7, 
                ));    
            } else {
                wp_editor("", "wp_custom_admin_interface_custom_footer", $settings = array(
                'wpautop' => false,    
                'textarea_name' => "wp_custom_admin_interface_settings[wp_custom_admin_interface_custom_footer]",
                'drag_drop_upload' => true,
                'textarea_rows' => 7,
                ));         
            }
        
            ?>

        </td>
    </tr>
	<?php
}



function wp_custom_admin_interface_remove_toolbar_frontend_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
	?>
    <tr valign="top">
        <td scope="row">
            <label for="wp_custom_admin_interface_remove_toolbar_frontend"><?php _e('Remove admin toolbar from the front end for all users', 'wp-custom-admin-interface' ); ?></label>
        </td>
        <td>
            
            <input class="wp_custom_admin_interface_settings_checkbox" type='checkbox' id="wp_custom_admin_interface_remove_toolbar_frontend" name='wp_custom_admin_interface_settings[wp_custom_admin_interface_remove_toolbar_frontend]' <?php checked( isset($options['wp_custom_admin_interface_remove_toolbar_frontend']), 1 ); ?> value='1'>
            
        </td>
    </tr>
	<?php
}



function wp_custom_admin_interface_custom_css_code_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
	?>
    <tr valign="top">
        <td scope="row">
            <label for="wp_custom_admin_interface_custom_css_code"><?php _e('Add custom CSS to the WordPress admin', 'wp-custom-admin-interface' ); ?></label>
        </td>
        <td>
            
            
            <textarea style="display:none;" cols="70" rows="30" name="wp_custom_admin_interface_settings[wp_custom_admin_interface_custom_css_code]" id="wp_custom_admin_interface_custom_css_code"><?php if(isset($options['wp_custom_admin_interface_custom_css_code'])) { echo esc_attr($options['wp_custom_admin_interface_custom_css_code']); } ?></textarea>
            
            
        </td>
    </tr>
	<?php
}





function wp_custom_admin_interface_custom_login_css_code_render() { 
	$options = get_option( 'wp_custom_admin_interface_custom_login_css_code' );
	?>
    <tr valign="top">
        <td scope="row">
            <label for="wp_custom_admin_interface_custom_login_css_code"><?php _e('Add custom CSS to the WordPress login area', 'wp-custom-admin-interface' ); ?></label>
        </td>
        <td>
            
            
            <textarea style="display:none;" cols="70" rows="30" name="wp_custom_admin_interface_settings[wp_custom_admin_interface_custom_login_css_code]" id="wp_custom_admin_interface_custom_login_css_code"><?php if(isset($options['wp_custom_admin_interface_custom_login_css_code'])) { echo esc_attr($options['wp_custom_admin_interface_custom_login_css_code']); } ?></textarea>
            
            
        </td>
    </tr>
	<?php
}





function wp_custom_admin_interface_custom_javascript_code_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
	?>
    <tr valign="top">
        <td scope="row">
            <label for="wp_custom_admin_interface_custom_javascript_code"><?php _e('Add custom Javascript/jQuery to the WordPress admin', 'wp-custom-admin-interface' ); ?></label> <i class="fa fa-info-circle information-icon" aria-hidden="true"></i>
            <p class="hidden"><em><?php _e('There\'s no need to put in the script tags and jQuery can be used like: ', 'wp-custom-admin-interface' ); ?><code><strong>$('body').show();</strong></code> </em></p>
        </td>
        <td>
            
            
            <textarea style="display:none;" cols="70" rows="30" name="wp_custom_admin_interface_settings[wp_custom_admin_interface_custom_javascript_code]" id="wp_custom_admin_interface_custom_javascript_code"><?php if(isset($options['wp_custom_admin_interface_custom_javascript_code'])) { echo esc_attr($options['wp_custom_admin_interface_custom_javascript_code']); } ?></textarea>
            
            
        </td>
    </tr>
	<?php
}


function wp_custom_admin_interface_custom_php_code_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
	?>
    <tr valign="top">
        <td scope="row">
            <label for="wp_custom_admin_interface_custom_php_code"><?php _e('Add custom PHP to WordPress', 'wp-custom-admin-interface' ); ?></label> <i class="fa fa-info-circle information-icon" aria-hidden="true"></i>
            <p class="hidden"><em><?php _e('There\'s no need to put in the starting or closing PHP tags', 'wp-custom-admin-interface' ); ?></em></p>
        </td>
        <td>
            <textarea style="display:none;" cols="70" rows="30" name="wp_custom_admin_interface_settings[wp_custom_admin_interface_custom_php_code]" id="wp_custom_admin_interface_custom_php_code"><?php if(isset($options['wp_custom_admin_interface_custom_php_code'])) { echo esc_attr($options['wp_custom_admin_interface_custom_php_code']); } ?></textarea>
        </td>
    </tr>
	<?php
}


function wp_custom_admin_interface_remove_footer_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
	?>
    <tr valign="top">
        <td scope="row">
            <label for="wp_custom_admin_interface_remove_footer"><?php _e('Remove WordPress Version Number from Footer', 'wp-custom-admin-interface' ); ?></label>
        </td>
        <td>
            
            <input class="wp_custom_admin_interface_settings_checkbox" type='checkbox' id="wp_custom_admin_interface_remove_footer" name='wp_custom_admin_interface_settings[wp_custom_admin_interface_remove_footer]' <?php checked( isset($options['wp_custom_admin_interface_remove_footer']), 1 ); ?> value='1'>
            
        </td>
    </tr>
	<?php
}



function wp_custom_admin_interface_deactivate_code_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
	?>
    <tr valign="top">
        <td scope="row">
            <label for="wp_custom_admin_interface_deactivate_code"><?php _e('Deactivate Custom Code on this Settings Tab', 'wp-custom-admin-interface' ); ?></label>
        </td>
        <td>
            
            <input class="wp_custom_admin_interface_settings_checkbox" type='checkbox' id="wp_custom_admin_interface_deactivate_code" name='wp_custom_admin_interface_settings[wp_custom_admin_interface_deactivate_code]' <?php checked( isset($options['wp_custom_admin_interface_deactivate_code']), 1 ); ?> value='1'>
            
        </td>
    </tr>
	<?php
}



function wp_custom_admin_interface_enable_maintenance_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
	?>
    <tr valign="top">
        <td scope="row">
            <label for="wp_custom_admin_interface_enable_maintenance"><?php _e('Enable Maintenance Mode', 'wp-custom-admin-interface' ); ?></label>
        </td>
        <td>
            
            <input class="wp_custom_admin_interface_settings_checkbox" type='checkbox' id="wp_custom_admin_interface_enable_maintenance" name='wp_custom_admin_interface_settings[wp_custom_admin_interface_enable_maintenance]' <?php checked( isset($options['wp_custom_admin_interface_enable_maintenance']), 1 ); ?> value='1'>
            
        </td>
    </tr>
	<?php
}





function wp_custom_admin_interface_maintenance_text_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
	?>
    <tr valign="top">
        <td scope="row">
            <label for="wp_custom_admin_interface_maintenance_text"><?php _e('Custom Maintenance Page/Coming Soon Text', 'wp-custom-admin-interface' ); ?></label>
        </td>
        <td>
            
            <?php 
            
            if(isset($options['wp_custom_admin_interface_maintenance_text'])){    
                wp_editor(html_entity_decode(stripslashes($options['wp_custom_admin_interface_maintenance_text'])), "wp_custom_admin_interface_maintenance_text", $settings = array(
                'wpautop' => false,
                'textarea_name' => "wp_custom_admin_interface_settings[wp_custom_admin_interface_maintenance_text]",
                'drag_drop_upload' => true,
                'textarea_rows' => 15, 
                ));    
            } else {
                wp_editor("", "wp_custom_admin_interface_maintenance_text", $settings = array(
                'wpautop' => false,
                'textarea_name' => "wp_custom_admin_interface_settings[wp_custom_admin_interface_maintenance_text]",
                'drag_drop_upload' => true,
                'textarea_rows' => 15,
                ));         
            }
        
            ?>

        </td>
    </tr>
	<?php
}



function wp_custom_admin_interface_maintenance_end_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
	?>
    <tr valign="top">
        <td scope="row">
            <label for="wp_custom_admin_interface_maintenance_end"><?php _e('Maintenance Mode End Date', 'wp-custom-admin-interface' ); ?></label> <i class="fa fa-info-circle information-icon" aria-hidden="true"></i>
            <p class="hidden"><em><?php _e('Please leave blank to have no expiry.', 'wp-custom-admin-interface' ); ?></em></p>
        </td>
        <td>
            <input class="wp_custom_admin_interface_settings_input datepicker" type="text" placeholder="YYYY-MM-DD" name="wp_custom_admin_interface_settings[wp_custom_admin_interface_maintenance_end]" id="wp_custom_admin_interface_maintenance_end" class="regular-text" value="<?php if(isset($options['wp_custom_admin_interface_maintenance_end'])) { echo esc_attr($options['wp_custom_admin_interface_maintenance_end']); } ?>">
        </td>
    </tr>
	<?php
}


function wp_custom_admin_interface_tab_memory_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
	?>
    <tr style="display:none !important;" valign="top">
        <td scope="row">
            <label for="wp_custom_admin_interface_tab_memory">Last Tab</label>
        </td>
        <td>
            <input class="wp_custom_admin_interface_settings_input" type="text" name="wp_custom_admin_interface_settings[wp_custom_admin_interface_tab_memory]" id="wp_custom_admin_interface_tab_memory" class="regular-text" value="<?php if(isset($options['wp_custom_admin_interface_tab_memory'])) { echo esc_attr($options['wp_custom_admin_interface_tab_memory']); } ?>">
        </td>
    </tr>
	<?php
}



function wp_custom_admin_interface_enable_custom_widget_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
	?>
    <tr valign="top">
        <td scope="row">
            <label for="wp_custom_admin_interface_enable_custom_widget"><?php _e('Enable Custom Dashboard Widget', 'wp-custom-admin-interface' ); ?></label>
        </td>
        <td>
            
            <input class="wp_custom_admin_interface_settings_checkbox" type='checkbox' id="wp_custom_admin_interface_enable_custom_widget" name='wp_custom_admin_interface_settings[wp_custom_admin_interface_enable_custom_widget]' <?php checked( isset($options['wp_custom_admin_interface_enable_custom_widget']), 1 ); ?> value='1'>
            
        </td>
    </tr>
	<?php
}



function wp_custom_admin_interface_custom_widget_title_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
	?>
    <tr valign="top">
        <td scope="row">
            <label for="wp_custom_admin_interface_custom_widget_title"><?php _e('Widget Title', 'wp-custom-admin-interface' ); ?></label>
        </td>
        <td>
            
        <input class="wp_custom_admin_interface_settings_input" type="text" name="wp_custom_admin_interface_settings[wp_custom_admin_interface_custom_widget_title]" id="wp_custom_admin_interface_custom_widget_title" class="regular-text" value="<?php if(isset($options['wp_custom_admin_interface_custom_widget_title'])) { echo esc_attr($options['wp_custom_admin_interface_custom_widget_title']); } ?>">
            
            
        </td>
    </tr>
	<?php
}



function wp_custom_admin_interface_custom_widget_content_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
	?>
    <tr valign="top">
        <td scope="row">
            <label for="wp_custom_admin_interface_custom_widget_content"><?php _e('Widget Content', 'wp-custom-admin-interface' ); ?></label> <i class="fa fa-info-circle information-icon" aria-hidden="true"></i>
            <p class="hidden"><em><?php _e('Please feel free to use shortcodes to add dynamic content.', 'wp-custom-admin-interface' ); ?></em></p>

        </td>
        <td>
            
            <?php 
            
            wp_custom_admin_interface_shortcode_output('widget_text');
    
            if(isset($options['wp_custom_admin_interface_custom_widget_content'])){    
                wp_editor(html_entity_decode(stripslashes($options['wp_custom_admin_interface_custom_widget_content'])), "wp_custom_admin_interface_custom_widget_content", $settings = array(
                'wpautop' => false,
                'textarea_name' => "wp_custom_admin_interface_settings[wp_custom_admin_interface_custom_widget_content]",
                'drag_drop_upload' => true,
                'textarea_rows' => 7, 
                ));    
            } else {
                wp_editor("", "wp_custom_admin_interface_custom_widget_content", $settings = array(
                'wpautop' => false,
                'textarea_name' => "wp_custom_admin_interface_settings[wp_custom_admin_interface_custom_widget_content]",
                'drag_drop_upload' => true,
                'textarea_rows' => 7,
                ));         
            }
        
            ?>

        </td>
    </tr>
	<?php
}




function wp_custom_admin_interface_color_scheme_color_one_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
	?>

    <tr valign="top">
        <td scope="row" colspan="2">
            <label><?php _e('These 5 below colors will make up a new color scheme called "Custom" that will be available to select on your', 'wp-custom-admin-interface' ); ?> <a target="_blank" href="profile.php"><?php _e('User Profile', 'wp-custom-admin-interface' ); ?></a> <?php _e('page.', 'wp-custom-admin-interface' ); ?></label>
        </td>
        
    </tr>

    <tr valign="top">
        <td scope="row">
            <label for="wp_custom_admin_interface_color_scheme_color_one"><?php _e('Color Scheme Color 1', 'wp-custom-admin-interface' ); ?></label>
        </td>
        <td>
            
        <input name="wp_custom_admin_interface_settings[wp_custom_admin_interface_color_scheme_color_one]" id="wp_custom_admin_interface_color_scheme_color_one" type="text" value="<?php if(isset($options['wp_custom_admin_interface_color_scheme_color_one'])) { echo esc_attr($options['wp_custom_admin_interface_color_scheme_color_one']); } ?>" class="my-color-field" data-default-color="#222" />    
      
        </td>
    </tr>
	<?php
}

function wp_custom_admin_interface_color_scheme_color_two_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
	?>
    <tr valign="top">
        <td scope="row">
            <label for="wp_custom_admin_interface_color_scheme_color_two"><?php _e('Color Scheme Color 2', 'wp-custom-admin-interface' ); ?></label>
        </td>
        <td>
            
        <input name="wp_custom_admin_interface_settings[wp_custom_admin_interface_color_scheme_color_two]" id="wp_custom_admin_interface_color_scheme_color_two" type="text" value="<?php if(isset($options['wp_custom_admin_interface_color_scheme_color_two'])) { echo esc_attr($options['wp_custom_admin_interface_color_scheme_color_two']); } ?>" class="my-color-field" data-default-color="#333" />    
      
        </td>
    </tr>
	<?php
}

function wp_custom_admin_interface_color_scheme_color_three_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
	?>
    <tr valign="top">
        <td scope="row">
            <label for="wp_custom_admin_interface_color_scheme_color_three"><?php _e('Color Scheme Color 3', 'wp-custom-admin-interface' ); ?></label>
        </td>
        <td>
            
        <input name="wp_custom_admin_interface_settings[wp_custom_admin_interface_color_scheme_color_three]" id="wp_custom_admin_interface_color_scheme_color_three" type="text" value="<?php if(isset($options['wp_custom_admin_interface_color_scheme_color_three'])) { echo esc_attr($options['wp_custom_admin_interface_color_scheme_color_three']); } ?>" class="my-color-field" data-default-color="#0073aa" />    
      
        </td>
    </tr>
	<?php
}

function wp_custom_admin_interface_color_scheme_color_four_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
	?>
    <tr valign="top">
        <td scope="row">
            <label for="wp_custom_admin_interface_color_scheme_color_four"><?php _e('Color Scheme Color 4', 'wp-custom-admin-interface' ); ?></label>
        </td>
        <td>
            
        <input name="wp_custom_admin_interface_settings[wp_custom_admin_interface_color_scheme_color_four]" id="wp_custom_admin_interface_color_scheme_color_four" type="text" value="<?php if(isset($options['wp_custom_admin_interface_color_scheme_color_four'])) { echo esc_attr($options['wp_custom_admin_interface_color_scheme_color_four']); } ?>" class="my-color-field" data-default-color="#00a0d2" />    
      
        </td>
    </tr>
	<?php
}





function wp_custom_admin_interface_color_scheme_icon_color_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
	?>
    <tr valign="top">
        <td scope="row">
            <label for="wp_custom_admin_interface_color_scheme_icon_color"><?php _e('SVG Icon Color', 'wp-custom-admin-interface' ); ?></label>
        </td>
        <td>
            
            <input name="wp_custom_admin_interface_settings[wp_custom_admin_interface_color_scheme_icon_color]" id="wp_custom_admin_interface_color_scheme_icon_color" type="text" value="<?php if(isset($options['wp_custom_admin_interface_color_scheme_icon_color'])) { echo esc_attr($options['wp_custom_admin_interface_color_scheme_icon_color']); } ?>" class="my-color-field" data-default-color="#f1f2f3" />

        </td>
    </tr>
	<?php
}



function wp_custom_admin_interface_force_color_scheme_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
	?>
    <tr valign="top">
        <td scope="row">
            <label for="wp_custom_admin_interface_force_color_scheme"><?php _e('Force the custom color scheme on all users', 'wp-custom-admin-interface' ); ?></label> <i class="fa fa-info-circle information-icon" aria-hidden="true"></i>
            <p class="hidden"><em><?php _e('This will force the "Custom" color scheme on all users regardless of what color scheme they have chosen in their user profile.', 'wp-custom-admin-interface' ); ?></em></p>
        </td>
        <td>
            
            <input class="wp_custom_admin_interface_settings_checkbox" type='checkbox' id="wp_custom_admin_interface_force_color_scheme" name='wp_custom_admin_interface_settings[wp_custom_admin_interface_force_color_scheme]' <?php checked( isset($options['wp_custom_admin_interface_force_color_scheme']), 1 ); ?> value='1'>
            
        </td>
    </tr>
	<?php
}


function wp_custom_admin_interface_disable_update_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
	?>
    <tr valign="top">
        <td scope="row">
            <label for="wp_custom_admin_interface_disable_update"><?php _e('Disable Automatic WordPress Updates', 'wp-custom-admin-interface' ); ?></label>
        </td>
        <td>
            
            <input class="wp_custom_admin_interface_settings_checkbox" type='checkbox' id="wp_custom_admin_interface_disable_update" name='wp_custom_admin_interface_settings[wp_custom_admin_interface_disable_update]' <?php checked( isset($options['wp_custom_admin_interface_disable_update']), 1 ); ?> value='1'>
            
        </td>
    </tr>
	<?php
}




function wp_custom_admin_interface_top_level_menu_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
    global $submenu, $menu;
    global $wp_custom_admin_interface_original_top_level_menu, $wp_custom_admin_interface_original_sub_level_menu; 
    
    
    

    
    /*
        highlight_string("<?php\n\$data =\n" . var_export($menu, true) . ";\n?>");
    
    echo '<br></br><br></br>';
    
    
    highlight_string("<?php\n\$data =\n" . var_export($wp_custom_admin_interface_original_top_level_menu, true) . ";\n?>");
    
    
    */
    
    

    
	?>





    <tr valign="top">
        <td scope="row" colspan="2">
            
            <div id="admin-menu-manager-buttons" style="margin-bottom: 30px;">
                <button id="add-separator" class="button-secondary" style="cursor:pointer;"><i class="fa fa-plus" aria-hidden="true"></i> <?php _e('Add separator', 'wp-custom-admin-interface' ); ?></button>
                
                <button id="add-menu-item" class="button-secondary" style="cursor:pointer;"><i class="fa fa-plus" aria-hidden="true"></i> <?php _e('Add menu item', 'wp-custom-admin-interface' ); ?></button>
                
                <?php
                
                $currentDomain = substr(get_admin_url(),0,-9);    
                
                $deleteCustomAdminSettingsSuffix = 'index.php?wp-custom-admin-interface=delete-menu';
                
                $emergencyUrl = $currentDomain.$deleteCustomAdminSettingsSuffix;
    
                ?>
                
                <button id="advanced-menu-functionality" data-clipboard-text="<?php echo $emergencyUrl; ?>" class="button-secondary" style="cursor:pointer;"><i class="fa fa-superpowers" aria-hidden="true"></i> <?php _e('Advanced functionality', 'wp-custom-admin-interface' ); ?></button>
                
                <button id="restore-default-menu" class="button-secondary" style="cursor:pointer;" menudata="<?php echo base64_encode(json_encode($wp_custom_admin_interface_original_top_level_menu)); ?>" submenudata="<?php echo base64_encode(json_encode($wp_custom_admin_interface_original_sub_level_menu)); ?>"><i class="fa fa-window-restore" aria-hidden="true"></i> <?php _e('Restore to default WordPress menu', 'wp-custom-admin-interface' ); ?></button>
                
                <button id="restore-last-save" class="button-secondary" style="cursor:pointer;" menudata="<?php echo $options['wp_custom_admin_interface_top_level_menu']; ?>" submenudata="<?php echo $options['wp_custom_admin_interface_sub_level_menu']; ?>" removeditems="<?php echo $options['wp_custom_admin_interface_remove_menu_item']; ?>"><i class="fa fa-window-restore" aria-hidden="true"></i> <?php _e('Restore to last save', 'wp-custom-admin-interface' ); ?></button>
                
                
                
                <!--This one below line of code is used to correctly set and maintain the advanced/simple view funcationlity so it doesn't get tricked from the creation of new menus-->
                <div class="restricted-advanced-functionality"></div>

                 <?php $admin_role_set = get_role( 'administrator' )->capabilities;  
                    echo '<span style="display:none;" id="admin-capabilities">';
                    foreach ($admin_role_set as $key => $value) {
                        
                        echo $key.',';
                    }    
                    echo '</span>';
                ?>
                
                
                
            </div>
                
                
                
            <div style="display:none;" id="custom-icon-dialog" title="Choose a custom icon">
                
                <?php
                    //declare an array that holds all dashicon classes
                    $allDashIcons = array('dashicons-menu', 'dashicons-admin-site', 'dashicons-dashboard', 'dashicons-admin-post', 'dashicons-admin-media', 'dashicons-admin-links', 'dashicons-admin-page', 'dashicons-admin-comments', 'dashicons-admin-appearance', 'dashicons-admin-plugins', 'dashicons-admin-users', 'dashicons-admin-tools', 'dashicons-admin-settings', 'dashicons-admin-network', 'dashicons-admin-home', 'dashicons-admin-generic', 'dashicons-admin-collapse', 'dashicons-filter', 'dashicons-admin-customizer', 'dashicons-admin-multisite', 'dashicons-welcome-write-blog', 'dashicons-welcome-add-page', 'dashicons-welcome-view-site', 'dashicons-welcome-widgets-menus', 'dashicons-welcome-comments', 'dashicons-welcome-learn-more', 'dashicons-format-aside', 'dashicons-format-image', 'dashicons-format-gallery', 'dashicons-format-video', 'dashicons-format-status', 'dashicons-format-quote', 'dashicons-format-chat', 'dashicons-format-audio', 'dashicons-camera', 'dashicons-images-alt', 'dashicons-images-alt2', 'dashicons-video-alt', 'dashicons-video-alt2', 'dashicons-video-alt3', 'dashicons-media-archive', 'dashicons-media-audio', 'dashicons-media-code', 'dashicons-media-default', 'dashicons-media-document', 'dashicons-media-interactive', 'dashicons-media-spreadsheet', 'dashicons-media-text', 'dashicons-media-video', 'dashicons-playlist-audio', 'dashicons-playlist-video', 'dashicons-controls-play', 'dashicons-controls-pause', 'dashicons-controls-forward', 'dashicons-controls-skipforward', 'dashicons-controls-back', 'dashicons-controls-skipback', 'dashicons-controls-repeat', 'dashicons-controls-volumeon', 'dashicons-controls-volumeoff', 'dashicons-image-crop', 'dashicons-image-rotate', 'dashicons-image-rotate-left', 'dashicons-image-rotate-right', 'dashicons-image-flip-vertical', 'dashicons-image-flip-horizontal', 'dashicons-image-filter', 'dashicons-undo', 'dashicons-redo', 'dashicons-editor-bold', 'dashicons-editor-italic', 'dashicons-editor-ul', 'dashicons-editor-ol', 'dashicons-editor-quote', 'dashicons-editor-alignleft', 'dashicons-editor-aligncenter', 'dashicons-editor-alignright', 'dashicons-editor-insertmore', 'dashicons-editor-spellcheck', 'dashicons-editor-expand', 'dashicons-editor-contract', 'dashicons-editor-kitchensink', 'dashicons-editor-underline', 'dashicons-editor-justify', 'dashicons-editor-textcolor', 'dashicons-editor-paste-word', 'dashicons-editor-paste-text', 'dashicons-editor-removeformatting', 'dashicons-editor-video', 'dashicons-editor-customchar', 'dashicons-editor-outdent', 'dashicons-editor-indent', 'dashicons-editor-help', 'dashicons-editor-strikethrough', 'dashicons-editor-unlink', 'dashicons-editor-rtl', 'dashicons-editor-break', 'dashicons-editor-code', 'dashicons-editor-paragraph', 'dashicons-editor-table', 'dashicons-align-left', 'dashicons-align-right', 'dashicons-align-center', 'dashicons-align-none', 'dashicons-lock', 'dashicons-unlock', 'dashicons-calendar', 'dashicons-calendar-alt', 'dashicons-visibility', 'dashicons-hidden', 'dashicons-post-status', 'dashicons-edit', 'dashicons-trash', 'dashicons-sticky', 'dashicons-external', 'dashicons-arrow-up', 'dashicons-arrow-down', 'dashicons-arrow-right', 'dashicons-arrow-left', 'dashicons-arrow-up-alt', 'dashicons-arrow-down-alt', 'dashicons-arrow-right-alt', 'dashicons-arrow-left-alt', 'dashicons-arrow-up-alt2', 'dashicons-arrow-down-alt2', 'dashicons-arrow-right-alt2', 'dashicons-arrow-left-alt2', 'dashicons-sort', 'dashicons-leftright', 'dashicons-randomize', 'dashicons-list-view', 'dashicons-exerpt-view', 'dashicons-grid-view', 'dashicons-move', 'dashicons-share', 'dashicons-share-alt', 'dashicons-share-alt2', 'dashicons-twitter', 'dashicons-rss', 'dashicons-email', 'dashicons-email-alt', 'dashicons-facebook', 'dashicons-facebook-alt', 'dashicons-googleplus', 'dashicons-networking', 'dashicons-hammer', 'dashicons-art', 'dashicons-migrate', 'dashicons-performance', 'dashicons-universal-access', 'dashicons-universal-access-alt', 'dashicons-tickets', 'dashicons-nametag', 'dashicons-clipboard', 'dashicons-heart', 'dashicons-megaphone', 'dashicons-schedule', 'dashicons-wordpress', 'dashicons-wordpress-alt', 'dashicons-pressthis', 'dashicons-update', 'dashicons-screenoptions', 'dashicons-info', 'dashicons-cart', 'dashicons-feedback', 'dashicons-cloud', 'dashicons-translation', 'dashicons-tag', 'dashicons-category', 'dashicons-archive', 'dashicons-tagcloud', 'dashicons-text', 'dashicons-yes', 'dashicons-no', 'dashicons-no-alt', 'dashicons-plus', 'dashicons-plus-alt', 'dashicons-minus', 'dashicons-dismiss', 'dashicons-marker', 'dashicons-star-filled', 'dashicons-star-half', 'dashicons-star-empty', 'dashicons-flag', 'dashicons-warning', 'dashicons-location', 'dashicons-location-alt', 'dashicons-vault', 'dashicons-shield', 'dashicons-shield-alt', 'dashicons-sos', 'dashicons-search', 'dashicons-slides', 'dashicons-analytics', 'dashicons-chart-pie', 'dashicons-chart-bar', 'dashicons-chart-line', 'dashicons-chart-area', 'dashicons-groups', 'dashicons-businessman', 'dashicons-id', 'dashicons-id-alt', 'dashicons-products', 'dashicons-awards', 'dashicons-forms', 'dashicons-testimonial', 'dashicons-portfolio', 'dashicons-book', 'dashicons-book-alt', 'dashicons-download', 'dashicons-upload', 'dashicons-backup', 'dashicons-clock', 'dashicons-lightbulb', 'dashicons-microphone', 'dashicons-desktop', 'dashicons-laptop', 'dashicons-tablet', 'dashicons-smartphone', 'dashicons-phone', 'dashicons-index-card', 'dashicons-carrot', 'dashicons-building', 'dashicons-store', 'dashicons-album', 'dashicons-palmtree', 'dashicons-tickets-alt', 'dashicons-money', 'dashicons-smiley', 'dashicons-thumbs-up', 'dashicons-thumbs-down', 'dashicons-layout', 'dashicons-paperclip');
                    
                    //for each dash icon print it out
                    foreach ($allDashIcons as $icons){
                        echo '<span data="'.$icons.'" class="dashicons icon-for-selection dash-icons-for-selection '.$icons.'"></span>';       
                    }
                    
                    echo '<hr style="border-top: 2px solid #ddd; margin-bottom: 15px;">';
                    echo '<p>Custom Icons</p>';

                    // print out all custom svg icons
                    foreach($wp_custom_admin_interface_original_top_level_menu as $item => $value) {
                        //check if item isn't a separator
                        $separatorClassCheck = $value[4];
                        
                        if(strpos($separatorClassCheck,'wp-menu-separator') !== false){} else {
                            
                            $iconTypeCheck = $value[6];
                            
                            if(strpos($iconTypeCheck,'data:image/svg+xml') !== false || strpos($iconTypeCheck,'http') !== false ){
                                
                                echo '<span class="svg svg-menu-icon icon-for-selection svg-icons-for-selection" data="'.$iconTypeCheck.'" style="background-image: url(&quot;'.$iconTypeCheck.'&quot;);"></span>';    
                                
                            }
                            

                        }

                    }
    
                    echo '<hr style="border-top: 2px solid #ddd; margin-bottom: 15px; margin-top: 15px;">';
                    echo '<input type="button" name="upload-icon-btn" id="upload-icon-btn" class="button-secondary wp_custom_admin_interface_media_upload_button" value="Upload an icon">';

    
                    
                ?>
                
                
                
            </div>
            
            <ul id="admin-menu-manager"></ul>
            
            

        
        </td>
        
    </tr>







    <tr valign="top" style="display:none;">
        <td scope="row">
            <label for="wp_custom_admin_interface_top_level_menu">Top Level Menu</label>
        </td>
        <td>
            
        <input class="wp_custom_admin_interface_settings_input" type="text" name="wp_custom_admin_interface_settings[wp_custom_admin_interface_top_level_menu]" id="wp_custom_admin_interface_top_level_menu" class="regular-text" value="<?php if(isset($options['wp_custom_admin_interface_top_level_menu'])) { echo esc_attr($options['wp_custom_admin_interface_top_level_menu']); } else {echo base64_encode(json_encode($menu));} ?>">
            
            
        </td>
    </tr>
	<?php
}



function wp_custom_admin_interface_sub_level_menu_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
    global $submenu, $menu;
	?>
    <tr valign="top" style="display:none;">
        <td scope="row">
            <label for="wp_custom_admin_interface_sub_level_menu">Sub Level Menu</label>
        </td>
        <td>
            
        <input class="wp_custom_admin_interface_settings_input" type="text" name="wp_custom_admin_interface_settings[wp_custom_admin_interface_sub_level_menu]" id="wp_custom_admin_interface_sub_level_menu" class="regular-text" value="<?php if(isset($options['wp_custom_admin_interface_sub_level_menu'])) { echo esc_attr($options['wp_custom_admin_interface_sub_level_menu']); } else {echo base64_encode(json_encode($submenu));} ?>">
            
            
        </td>
    </tr>




	<?php
}




function wp_custom_admin_interface_remove_menu_item_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
	?>
    <tr valign="top" style="display:none;">
        <td scope="row">
            <label for="wp_custom_admin_interface_remove_menu_item">Menu items to remove</label>
        </td>

        <td>
            <input class="wp_custom_admin_interface_settings_input" type="text" name="wp_custom_admin_interface_settings[wp_custom_admin_interface_remove_menu_item]" id="wp_custom_admin_interface_remove_menu_item" class="regular-text" value="<?php if(isset($options['wp_custom_admin_interface_remove_menu_item'])) { echo esc_attr($options['wp_custom_admin_interface_remove_menu_item']); } ?>">
        </td>
    </tr>
	<?php
}





function wp_custom_admin_interface_exception_type_render() { 
    
    echo wp_custom_admin_interface_exception_type_render_assist('wp_custom_admin_interface_exception_type');
     
}


function wp_custom_admin_interface_exception_cases_render() { 
	
    echo wp_custom_admin_interface_exception_cases_render_assist('wp_custom_admin_interface_exception_cases');
   
}


function wp_custom_admin_interface_show_notifications_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
	?>
    <tr valign="top">
        <td scope="row">
            <label for="wp_custom_admin_interface_show_notifications"><?php _e('Show notification icons on custom menu', 'wp-custom-admin-interface' ); ?></label>
        </td>
        <td>
            <input class="wp_custom_admin_interface_settings_checkbox" type='checkbox' id="wp_custom_admin_interface_show_notifications" name='wp_custom_admin_interface_settings[wp_custom_admin_interface_show_notifications]' <?php checked( isset($options['wp_custom_admin_interface_show_notifications']), 1 ); ?> value='1'>
            
        </td>
    </tr>

	<?php
}






function wp_custom_admin_interface_hide_these_plugins_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
	?>

    <tr valign="top">
        <td scope="row" colspan="2">
            <?php
    
    
            $all_plugins = get_plugins();


    echo '<div id="plugins-manager">';
    
    foreach($all_plugins as $key => $val){
        
        $pluginPath = $key;
        $pluginName = $val['Name'];
        $pluginDescription = $val['Description'];
            
        echo '<li class="plugin-item"><div><i class="fa fa-eye-slash remove-plugin-item" title="Hide plugin" aria-hidden="true"></i><span id="plugin-name" style="font-weight: bold;" data="'.$pluginPath.'">'.$pluginName.' <i class="fa fa-info-circle information-icon" aria-hidden="true"></i><p style="font-weight: normal; padding-left: 0px;" class="hidden">'.$pluginDescription.'</p></span></div></li>';  
        
        
        
    }
    
    echo '</div>';
    

    
    ?>
            
        </td>
        
    </tr>    

    <tr valign="top" style="display:none;">
        <td scope="row">
            <label for="wp_custom_admin_interface_hide_these_plugins">Hide plugins</label>
        </td>

        <td>
            <input class="wp_custom_admin_interface_settings_input" type="text" name="wp_custom_admin_interface_settings[wp_custom_admin_interface_hide_these_plugins]" id="wp_custom_admin_interface_hide_these_plugins" class="regular-text" value="<?php if(isset($options['wp_custom_admin_interface_hide_these_plugins'])) { echo esc_attr($options['wp_custom_admin_interface_hide_these_plugins']); } ?>">
        </td>
    </tr>
	<?php
}



function wp_custom_admin_interface_exception_type_plugin_render() { 
    
    echo wp_custom_admin_interface_exception_type_render_assist('wp_custom_admin_interface_exception_type_plugin');
     
}


function wp_custom_admin_interface_exception_cases_plugin_render() { 
    
    echo wp_custom_admin_interface_exception_cases_render_assist('wp_custom_admin_interface_exception_cases_plugin');
    
}









function wp_custom_admin_interface_hide_these_users_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
	?>

    <tr valign="top">
        <td scope="row" colspan="2">
            <?php
            global $wp_custom_admin_interface_original_user_listing;
            
            /*
            highlight_string("<?php\n\$data =\n" . var_export($wp_custom_admin_interface_original_user_listing, true) . ";\n?>");
            */
            
            //echo out the container
            echo '<div id="user-manager">';
    

            foreach($wp_custom_admin_interface_original_user_listing as $value){
                
                $userId = $value->ID;
                $userInfo = get_userdata($userId);
                
                $userFirstName = $userInfo->first_name;
                $userLastName = $userInfo->last_name;
                //we need to first unserialize the array, then get just the keys of the array and then implode it into a comma string
                $userRole = implode(', ',$userInfo->roles);
                
                if(strlen($userFirstName)<1 && strlen($userFirstName)<1) {
                    $userDisplayName = $userInfo->user_login;
                } else {
                    $userDisplayName = $userFirstName.' '.$userLastName;
                }
                
                
                
                echo '<li class="user-item"><div><i class="fa fa-eye-slash remove-user-item" title="Hide user" aria-hidden="true"></i><span id="user-name" style="font-weight: bold;" data="'.$userId.'">'.$userDisplayName.' <em style="font-weight: normal;">('.$userRole.')</em></span></div></li>';  

            }
            //end container
            echo '</div>';
    
         

            ?>
            
        </td>
        
    </tr>    

    <tr valign="top" style="display:none;">
        <td scope="row">
            <label for="wp_custom_admin_interface_hide_these_users">Hide users</label>
        </td>

        <td>
            <input class="wp_custom_admin_interface_settings_input" type="text" name="wp_custom_admin_interface_settings[wp_custom_admin_interface_hide_these_users]" id="wp_custom_admin_interface_hide_these_users" class="regular-text" value="<?php if(isset($options['wp_custom_admin_interface_hide_these_users'])) { echo esc_attr($options['wp_custom_admin_interface_hide_these_users']); } ?>">
        </td>
    </tr>
	<?php
}










function wp_custom_admin_interface_exception_type_user_render() { 
    
    echo wp_custom_admin_interface_exception_type_render_assist('wp_custom_admin_interface_exception_type_user');
     
}


function wp_custom_admin_interface_exception_cases_user_render() { 
    
    echo wp_custom_admin_interface_exception_cases_render_assist('wp_custom_admin_interface_exception_cases_user');
    
}










function wp_custom_admin_interface_hide_these_sidebars_render() { 
	$options = get_option( 'wp_custom_admin_interface_settings' );
	?>

    <tr valign="top">
        <td scope="row" colspan="2">
            <?php
            
            /*
            highlight_string("<?php\n\$data =\n" . var_export($wp_custom_admin_interface_original_user_listing, true) . ";\n?>");
            */
            
            global $wp_custom_admin_interface_original_sidebar_listing;

    
            //echo out the container
            echo '<div id="sidebar-manager">';
    
            foreach($wp_custom_admin_interface_original_sidebar_listing as $sidebar) {
                
                $sidebarName = $sidebar['name'];
                $sidebarDescription = $sidebar['description'];
                $sidebarID = $sidebar['id'];
            
                
                echo '<li class="sidebar-item"><div><i class="fa fa-eye-slash remove-sidebar-item" title="Hide sidebar" aria-hidden="true"></i><span id="sidebar-name" style="font-weight: bold;" data="'.$sidebarID.'">'.$sidebarName.' <em style="font-weight: normal;">('.$sidebarDescription.')</em></span></div></li>';  

            }
            //end container
            echo '</div>';
    

            ?>
            
        </td>
        
    </tr>    

    <tr valign="top" style="display:none;">
        <td scope="row">
            <label for="wp_custom_admin_interface_hide_these_sidebars">Hide sidebars</label>
        </td>

        <td>
            <input class="wp_custom_admin_interface_settings_input" type="text" name="wp_custom_admin_interface_settings[wp_custom_admin_interface_hide_these_sidebars]" id="wp_custom_admin_interface_hide_these_sidebars" class="regular-text" value="<?php if(isset($options['wp_custom_admin_interface_hide_these_sidebars'])) { echo esc_attr($options['wp_custom_admin_interface_hide_these_sidebars']); } ?>">
        </td>
    </tr>
	<?php
}




function wp_custom_admin_interface_exception_type_sidebar_render() { 
    
    echo wp_custom_admin_interface_exception_type_render_assist('wp_custom_admin_interface_exception_type_sidebar');
     
}


function wp_custom_admin_interface_exception_cases_sidebar_render() { 
    
    echo wp_custom_admin_interface_exception_cases_render_assist('wp_custom_admin_interface_exception_cases_sidebar');
    
}


function wp_custom_admin_interface_exception_type_toolbar_render() { 
    
    echo wp_custom_admin_interface_exception_type_render_assist('wp_custom_admin_interface_exception_type_toolbar');
     
}


function wp_custom_admin_interface_exception_cases_toolbar_render() { 
    
    echo wp_custom_admin_interface_exception_cases_render_assist('wp_custom_admin_interface_exception_cases_toolbar');
    
}


function wp_custom_admin_interface_primary_toolbar_menu_render() { 
    
    global $wp_custom_admin_interface_all_toolbar_items;
    
    
    echo '<h1 style="font-size:40px; line-height: 50px; font-weight: 900; color: #c70202;">THIS FEATURE IS CURRENTLY UNDER CONSTRUCTION. PLEASE IGNORE EVERYTHING ON THIS PAGE - YOU DIDN\'T SEE ANYTHING.</h1>';
    
    highlight_string("<?php\n\$data =\n" . var_export($wp_custom_admin_interface_all_toolbar_items, true) . ";\n?>");
    

//	foreach ( $wp_custom_admin_interface_all_toolbar_items as $node ) {
//
//        echo 'id: <strong>'.$node->id.'</strong></br>'; 
//        echo 'title: <strong>'.$node->title.'</strong></br>'; 
//        echo 'parent: <strong>'.$node->parent.'</strong></br>'; 
//        echo 'href: <strong>'.$node->href.'</strong></br>'; 
//        echo 'group: <strong>'.$node->group.'</strong></br>'; 
//        echo 'meta: <strong>'.implode(' ', $node->meta).'</strong></br>';
//        echo '<br></br>';
//        
//	}
    

    
    ?>
    
    <ul id="toolbar-menu-manager"></ul>
    

    
<!--    <tr valign="top" style="display:none;">-->
    <tr valign="top">    
        <td scope="row">
            <label for="wp_custom_admin_interface_primary_toolbar_menu">Primary Toolbar Menu</label>
        </td>
        <td>
            
            <input class="wp_custom_admin_interface_settings_input" type="text" name="wp_custom_admin_interface_settings[wp_custom_admin_interface_primary_toolbar_menu]" id="wp_custom_admin_interface_primary_toolbar_menu" class="regular-text" value="<?php if(isset($options['wp_custom_admin_interface_primary_toolbar_menu'])) { echo esc_attr($options['wp_custom_admin_interface_primary_toolbar_menu']); } else {echo base64_encode(json_encode($wp_custom_admin_interface_all_toolbar_items));} ?>">

   
        </td>
    </tr>
    
    <?php  
}

function wp_custom_admin_interface_remove_toolbar_item_render() { 
    
    $options = get_option( 'wp_custom_admin_interface_settings' );
	?>
    <tr valign="top">
<!--    <tr valign="top" style="display:none;">    -->
        <td scope="row">
            <label for="wp_custom_admin_interface_remove_toolbar_item">Toolbar items to remove</label>
        </td>

        <td>
            <input class="wp_custom_admin_interface_settings_input" type="text" name="wp_custom_admin_interface_settings[wp_custom_admin_interface_remove_toolbar_item]" id="wp_custom_admin_interface_remove_toolbar_item" class="regular-text" value="<?php if(isset($options['wp_custom_admin_interface_remove_toolbar_item'])) { echo esc_attr($options['wp_custom_admin_interface_remove_toolbar_item']); } ?>">
        </td>
    </tr>
	<?php
    
}








?>